function onYouTubeIframeAPIReady() {
    theme.Video.loadVideos()
}

function removeImageLoadingAnimation(e) {
    var t = e.hasAttribute("data-image-loading-animation") ? e : e.closest("[data-image-loading-animation]");
    t && t.removeAttribute("data-image-loading-animation")
}

function debounce_leading(e, t = 300) {
    let i;
    return (...s) => {
        i || e.apply(this, s), clearTimeout(i), i = setTimeout(() => {
            i = void 0
        }, t)
    }
}

function loop() {
    Array.prototype.forEach.call(elementsToShow, function (e) {
        isElementInViewport(e) && e.classList.add("is-visible")
    }), scroll(loop)
}

function isElementInViewport(e) {
    var t = e.getBoundingClientRect();
    return t.top <= 0 && t.bottom >= 0 || t.bottom >= (window.innerHeight || document.documentElement.clientHeight) && t.top <= (window.innerHeight || document.documentElement.clientHeight) || t.top >= 0 && t.bottom <= (window.innerHeight || document.documentElement.clientHeight)
}
window.theme = window.theme || {}, window.theme = window.theme || {}, theme.Sections = function () {
    this.constructors = {}, this.instances = [], document.addEventListener("shopify:section:load", this._onSectionLoad.bind(this)), document.addEventListener("shopify:section:unload", this._onSectionUnload.bind(this)), document.addEventListener("shopify:section:select", this._onSelect.bind(this)), document.addEventListener("shopify:section:deselect", this._onDeselect.bind(this)), document.addEventListener("shopify:block:select", this._onBlockSelect.bind(this)), document.addEventListener("shopify:block:deselect", this._onBlockDeselect.bind(this))
}, theme.Sections.prototype = Object.assign({}, theme.Sections.prototype, {
    _createInstance: function (e, t) {
        var i = e.getAttribute("data-section-id"),
            s = e.getAttribute("data-section-type");
        if (t = t || this.constructors[s], void 0 !== t) {
            var n = Object.assign(new t(e), {
                id: i,
                type: s,
                container: e
            });
            isElementInViewport(e) && e.parentElement.classList.add("is-visible"), this.instances.push(n)
        }
    },
    _onSectionLoad: function (e) {
        var t = document.querySelector('[data-section-id="' + e.detail.sectionId + '"]');
        t && this._createInstance(t)
    },
    _onSectionUnload: function (e) {
        this.instances = this.instances.filter(function (t) {
            var i = t.id === e.detail.sectionId;
            return i && "function" == typeof t.onUnload && t.onUnload(e), !i
        })
    },
    _onSelect: function (e) {
        var t = this.instances.find(function (t) {
            return t.id === e.detail.sectionId
        });
        void 0 !== t && "function" == typeof t.onSelect && t.onSelect(e)
    },
    _onDeselect: function (e) {
        var t = this.instances.find(function (t) {
            return t.id === e.detail.sectionId
        });
        void 0 !== t && "function" == typeof t.onDeselect && t.onDeselect(e)
    },
    _onBlockSelect: function (e) {
        var t = this.instances.find(function (t) {
            return t.id === e.detail.sectionId
        });
        void 0 !== t && "function" == typeof t.onBlockSelect && t.onBlockSelect(e)
    },
    _onBlockDeselect: function (e) {
        var t = this.instances.find(function (t) {
            return t.id === e.detail.sectionId
        });
        void 0 !== t && "function" == typeof t.onBlockDeselect && t.onBlockDeselect(e)
    },
    register: function (e, t) {
        this.constructors[e] = t, document.querySelectorAll('[data-section-type="' + e + '"]').forEach(function (e) {
            this._createInstance(e, t)
        }.bind(this))
    }
}), window.slate = window.slate || {}, slate.utils = {
    getParameterByName: function (e, t) {
        t || (t = window.location.href), e = e.replace(/[[\]]/g, "\\$&");
        var i = new RegExp("[?&]" + e + "(=([^&#]*)|&|#|$)"),
            s = i.exec(t);
        return s ? s[2] ? decodeURIComponent(s[2].replace(/\+/g, " ")) : "" : null
    },
    resizeSelects: function (e) {
        e.forEach(function (e) {
            var t = 55,
                i = document.createElement("span");
            i.innerHTML = e.selectedOptions[0].label, document.querySelector("footer").appendChild(i);
            var s = i.offsetWidth + t;
            i.remove(), e.style.width = s + "px"
        })
    },
    keyboardKeys: {
        TAB: 9,
        ENTER: 13,
        ESCAPE: 27,
        LEFTARROW: 37,
        RIGHTARROW: 39
    }
}, window.slate = window.slate || {}, slate.rte = {
    wrapTable: function (e) {
        e.tables.forEach(function (t) {
            var i = document.createElement("div");
            i.classList.add(e.tableWrapperClass), t.parentNode.insertBefore(i, t), i.appendChild(t)
        })
    },
    wrapIframe: function (e) {
        e.iframes.forEach(function (t) {
            var i = document.createElement("div");
            i.classList.add(e.iframeWrapperClass), t.parentNode.insertBefore(i, t), i.appendChild(t), t.src = t.src
        })
    }
}, window.slate = window.slate || {}, slate.a11y = {
    state: {
        firstFocusable: null,
        lastFocusable: null
    },
    pageLinkFocus: function (e) {
        function t() {
            e.classList.remove(i), e.removeAttribute("tabindex")
        }
        if (e) {
            var i = "js-focus-hidden";
            e.setAttribute("tabIndex", "-1"), e.focus(), e.classList.add(i), e.addEventListener("blur", t, {
                once: !0
            })
        }
    },
    trapFocus: function (e) {
        var t = Array.from(e.container.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex^="-"])')).filter(function (e) {
            var t = e.offsetWidth,
                i = e.offsetHeight;
            return 0 !== t && 0 !== i && "none" !== getComputedStyle(e).getPropertyValue("display")
        });
        this.state.firstFocusable = t[0], this.state.lastFocusable = t[t.length - 1], e.elementToFocus || (e.elementToFocus = e.container), e.container.setAttribute("tabindex", "-1"), e.elementToFocus.focus(), this._setupHandlers(), document.addEventListener("focusin", this._onFocusInHandler), document.addEventListener("focusout", this._onFocusOutHandler)
    },
    _setupHandlers: function () {
        this._onFocusInHandler || (this._onFocusInHandler = this._onFocusIn.bind(this)), this._onFocusOutHandler || (this._onFocusOutHandler = this._onFocusIn.bind(this)), this._manageFocusHandler || (this._manageFocusHandler = this._manageFocus.bind(this))
    },
    _onFocusOut: function () {
        document.removeEventListener("keydown", this._manageFocusHandler)
    },
    _onFocusIn: function (e) {
        e.target !== this.state.lastFocusable && e.target !== this.state.firstFocusable || document.addEventListener("keydown", this._manageFocusHandler)
    },
    _manageFocus: function (e) {
        e.keyCode === slate.utils.keyboardKeys.TAB && (e.target !== this.state.lastFocusable || e.shiftKey || (e.preventDefault(), this.state.firstFocusable.focus()), e.target === this.state.firstFocusable && e.shiftKey && (e.preventDefault(), this.state.lastFocusable.focus()))
    },
    removeTrapFocus: function (e) {
        e.container && e.container.removeAttribute("tabindex"), document.removeEventListener("focusin", this._onFocusInHandler)
    },
    accessibleLinks: function (e) {
        function t(e) {
            "object" != typeof e && (e = {});
            var t = Object.assign({
                newWindow: "Opens in a new window.",
                external: "Opens external website.",
                newWindowExternal: "Opens external website in a new window."
            }, e),
                i = document.createElement("ul"),
                r = "";
            for (var o in t) r += "<li id=" + n[o] + ">" + t[o] + "</li>";
            i.setAttribute("hidden", !0), i.innerHTML = r, s.appendChild(i)
        }

        function i(e) {
            var t = window.location.hostname;
            return e.hostname !== t
        }
        var s = document.querySelector("body"),
            n = {
                newWindow: "a11y-new-window-message",
                external: "a11y-external-message",
                newWindowExternal: "a11y-new-window-external-message"
            };
        void 0 !== e.links && e.links.length || (e.links = document.querySelectorAll("a[href]:not([aria-describedby])")), e.links.forEach(function (e) {
            var t = e.getAttribute("target"),
                s = e.getAttribute("rel"),
                r = i(e),
                o = "_blank" === t;
            if (r && e.setAttribute("aria-describedby", n.external), o) {
                if (!s || -1 === s.indexOf("noopener")) {
                    var a = void 0 === s ? "" : s + " ";
                    a += "noopener", e.setAttribute("rel", a)
                }
                e.setAttribute("aria-describedby", n.newWindow)
            }
            r && o && e.setAttribute("aria-describedby", n.newWindowExternal)
        }), t(e.messages)
    }
}, theme.Images = function () {
    function e(e, t) {
        "string" == typeof e && (e = [e]);
        for (var i = 0; i < e.length; i++) {
            var s = e[i];
            this.loadImage(this.getSizedImageUrl(s, t))
        }
    }

    function t(e) {
        (new Image).src = e
    }

    function i(e, t, i) {
        var s = this.imageSize(t.src),
            n = this.getSizedImageUrl(e.src, s);
        i ? i(n, e, t) : t.src = n
    }

    function s(e) {
        var t = e.match(/.+_((?:pico|icon|thumb|small|compact|medium|large|grande)|\d{1,4}x\d{0,4}|x\d{1,4})[_\\.@]/);
        return null !== t ? void 0 !== t[2] ? t[1] + t[2] : t[1] : null
    }

    function n(e, t) {
        if (null === t) return e;
        if ("master" === t) return this.removeProtocol(e);
        var i = e.match(/\.(jpg|jpeg|gif|png|bmp|bitmap|tiff|tif)(\?v=\d+)?$/i);
        if (null !== i) {
            var s = e.split(i[0]),
                n = i[0];
            return this.removeProtocol(s[0] + "_" + t + n)
        }
        return null
    }

    function r(e) {
        return e.replace(/http(s)?:/, "")
    }
    return {
        preload: e,
        loadImage: t,
        switchImage: i,
        imageSize: s,
        getSizedImageUrl: n,
        removeProtocol: r
    }
}(), theme.Currency = function () {
    function e(e, i) {
        function s(e, t, i, s) {
            if (i = i || ",", s = s || ".", isNaN(e) || null === e) return 0;
            e = (e / 100).toFixed(t);
            var n = e.split("."),
                r = n[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1" + i),
                o = n[1] ? s + n[1] : "";
            return r + o
        }
        "string" == typeof e && (e = e.replace(".", ""));
        var n = "",
            r = /\{\{\s*(\w+)\s*\}\}/,
            o = i || t;
        switch (o.match(r)[1]) {
            case "amount":
                n = s(e, 2);
                break;
            case "amount_no_decimals":
                n = s(e, 0);
                break;
            case "amount_with_comma_separator":
                n = s(e, 2, ".", ",");
                break;
            case "amount_no_decimals_with_comma_separator":
                n = s(e, 0, ".", ",");
                break;
            case "amount_no_decimals_with_space_separator":
                n = s(e, 0, " ");
                break;
            case "amount_with_apostrophe_separator":
                n = s(e, 2, "'")
        }
        return o.replace(r, n)
    }
    var t = "${{amount}}";
    return {
        formatMoney: e
    }
}(), slate.Variants = function () {
    function e(e) {
        this.container = e.container, this.product = e.product, this.originalSelectorId = e.originalSelectorId, this.enableHistoryState = e.enableHistoryState, this.singleOptions = this.container.querySelectorAll(e.singleOptionSelector), this.currentVariant = this._getVariantFromOptions(), this.singleOptions.forEach(function (e) {
            e.addEventListener("change", this._onSelectChange.bind(this))
        }.bind(this))
    }
    return e.prototype = Object.assign({}, e.prototype, {
        _getCurrentOptions: function () {
            var e = [];
            return this.singleOptions.forEach(function (t) {
                var i = t.getAttribute("type"),
                    s = "radio" === i || "checkbox" === i;
                s && !t.checked || e.push({
                    value: t.value,
                    index: t.getAttribute("data-index")
                })
            }), e
        },
        _getVariantFromOptions: function () {
            var e = this._getCurrentOptions(),
                t = this.product.variants,
                i = t.find(function (t) {
                    return e.every(function (e) {
                        return t[e.index] === e.value
                    })
                });
            return i
        },
        _onSelectChange: function () {
            var e = this._getVariantFromOptions();
            this.container.dispatchEvent(new CustomEvent("variantChange", {
                detail: {
                    variant: e
                },
                bubbles: !0,
                cancelable: !0
            })), e && (this._updateMasterSelect(e), this._updateImages(e), this._updatePrice(e), this._updateSKU(e), this.currentVariant = e, this.enableHistoryState && this._updateHistoryState(e))
        },
        _updateImages: function (e) {
            var t = e.featured_image || {},
                i = this.currentVariant.featured_image || {};
            e.featured_image && t.src !== i.src && this.container.dispatchEvent(new CustomEvent("variantImageChange", {
                detail: {
                    variant: e
                },
                bubbles: !0,
                cancelable: !0
            }))
        },
        _updatePrice: function (e) {
            e.price === this.currentVariant.price && e.compare_at_price === this.currentVariant.compare_at_price && e.unit_price === this.currentVariant.unit_price || this.container.dispatchEvent(new CustomEvent("variantPriceChange", {
                detail: {
                    variant: e
                },
                bubbles: !0,
                cancelable: !0
            }))
        },
        _updateSKU: function (e) {
            e.sku !== this.currentVariant.sku && this.container.dispatchEvent(new CustomEvent("variantSKUChange", {
                detail: {
                    variant: e
                },
                bubbles: !0,
                cancelable: !0
            }))
        },
        _updateHistoryState: function (e) {
            if (history.replaceState && e) {
                var t = window.location.protocol + "//" + window.location.host + window.location.pathname + "?variant=" + e.id;
                window.history.replaceState({
                    path: t
                }, "", t)
            }
        },
        _updateMasterSelect: function (e) {
            var t = this.container.querySelector(this.originalSelectorId);
            t && (t.value = e.id)
        }
    }), e
}(), this.Shopify = this.Shopify || {}, this.Shopify.theme = this.Shopify.theme || {}, this.Shopify.theme.PredictiveSearch = function () {
    "use strict";

    function e(e) {
        var t;
        if (null == e) throw t = new TypeError("'query' is missing"), t.type = "argument", t;
        if ("string" != typeof e) throw t = new TypeError("'query' is not a string"), t.type = "argument", t
    }

    function t() {
        var e = Error.call(this);
        return e.name = "Server error", e.message = "Something went wrong on the server", e.status = 500, e
    }

    function i(e) {
        var t = Error.call(this);
        return t.name = "Not found", t.message = "Not found", t.status = e, t
    }

    function s() {
        var e = Error.call(this);
        return e.name = "Server error", e.message = "Something went wrong on the server", e.status = 500, e
    }

    function n(e) {
        var t = Error.call(this);
        return t.name = "Content-Type error", t.message = "Content-Type was not provided or is of wrong type", t.status = e, t
    }

    function r(e) {
        var t = Error.call(this);
        return t.name = "JSON parse error", t.message = "JSON syntax error", t.status = e, t
    }

    function o(e, t, i, s) {
        var n = Error.call(this);
        return n.name = t, n.message = i, n.status = e, n.retryAfter = s, n
    }

    function a(e, t, i) {
        var s = Error.call(this);
        return s.name = t, s.message = i, s.status = e, s
    }

    function c(e, t, i) {
        var s = Error.call(this);
        return s.name = t, s.message = i, s.status = e, s
    }

    function l(e, l, d, u, h) {
        var p = new XMLHttpRequest,
            m = e + "/suggest.json";
        p.onreadystatechange = function () {
            if (p.readyState === XMLHttpRequest.DONE) {
                var e = p.getResponseHeader("Content-Type");
                if (p.status >= 500) h(new s);
                else if (404 !== p.status)
                    if ("string" == typeof e && null !== e.toLowerCase().match("applicationjson"))
                        if (417 !== p.status)
                            if (422 !== p.status)
                                if (429 !== p.status)
                                    if (200 !== p.status) try {
                                        var l = JSON.parse(p.responseText);
                                        h(new t(p.status, l.message, l.description))
                                    } catch (e) {
                                        h(new r(p.status))
                                    } else try {
                                        var m = JSON.parse(p.responseText);
                                        m.query = d, u(m)
                                    } catch (e) {
                                        h(new r(p.status))
                                    } else try {
                                        var v = JSON.parse(p.responseText);
                                        h(new o(p.status, v.message, v.description, p.getResponseHeader("Retry-After")))
                                    } catch (e) {
                                        h(new r(p.status))
                                    } else try {
                                        var f = JSON.parse(p.responseText);
                                        h(new c(p.status, f.message, f.description))
                                    } catch (e) {
                                        h(new r(p.status))
                                    } else try {
                                        var y = JSON.parse(p.responseText);
                                        h(new a(p.status, y.message, y.description))
                                    } catch (e) {
                                        h(new r(p.status))
                                    } else h(new n(p.status));
                else h(new i(p.status))
            }
        }, p.open("get", m + "?q=" + encodeURIComponent(d) + "&" + l), p.setRequestHeader("Content-Type", "applicationjson"), p.send()
    }

    function d(e) {
        this._store = {}, this._keys = [], e && e.bucketSize ? this.bucketSize = e.bucketSize : this.bucketSize = 20
    }

    function u() {
        this.events = {}
    }

    function h(e) {
        this.eventName = e, this.callbacks = []
    }

    function p(e, t) {
        var i = null;
        return function () {
            var s = this,
                n = arguments;
            clearTimeout(i), i = setTimeout(function () {
                i = null, e.apply(s, n)
            }, t || 0)
        }
    }

    function m(e, t) {
        var i = "";
        return t = t || null, Object.keys(e).forEach(function (s) {
            var n = s + "=";
            switch (t && (n = t + "[" + s + "]"), v(e[s])) {
                case "object":
                    i += m(e[s], t ? n : s);
                    break;
                case "array":
                    i += n + "=" + e[s].join(",") + "&";
                    break;
                default:
                    t && (n += "="), i += n + encodeURIComponent(e[s]) + "&"
            }
        }), i
    }

    function v(e) {
        return Object.prototype.toString.call(e).slice(8, -1).toLowerCase()
    }

    function f(e, t) {
        if (!e) throw new TypeError("No params object was specified");
        this.searchUrl = t, this._retryAfter = null, this._currentQuery = null, this.dispatcher = new u, this.cache = new d({
            bucketSize: 40
        }), this.queryParams = m(e)
    }

    function y(e) {
        return "string" != typeof e ? null : e.trim().replace(" ", "-").toLowerCase()
    }
    d.prototype.set = function (e, t) {
        if (this.count() >= this.bucketSize) {
            var i = this._keys.splice(0, 1);
            this.delete(i)
        }
        return this._keys.push(e), this._store[e] = t, this._store
    }, d.prototype.get = function (e) {
        return this._store[e]
    }, d.prototype.has = function (e) {
        return Boolean(this._store[e])
    }, d.prototype.count = function () {
        return Object.keys(this._store).length
    }, d.prototype.delete = function (e) {
        var t = Boolean(this._store[e]);
        return delete this._store[e], t && !this._store[e]
    }, u.prototype.on = function (e, t) {
        var i = this.events[e];
        i || (i = new h(e), this.events[e] = i), i.registerCallback(t)
    }, u.prototype.off = function (e, t) {
        var i = this.events[e];
        i && i.callbacks.indexOf(t) > -1 && (i.unregisterCallback(t), 0 === i.callbacks.length && delete this.events[e])
    }, u.prototype.dispatch = function (e, t) {
        var i = this.events[e];
        i && i.fire(t)
    }, h.prototype.registerCallback = function (e) {
        this.callbacks.push(e)
    }, h.prototype.unregisterCallback = function (e) {
        var t = this.callbacks.indexOf(e);
        t > -1 && this.callbacks.splice(t, 1)
    }, h.prototype.fire = function (e) {
        var t = this.callbacks.slice(0);
        t.forEach(function (t) {
            t(e)
        })
    };
    var g = 10,
        b = p(l, g);
    return f.TYPES = {
        PRODUCT: "product",
        PAGE: "page",
        ARTICLE: "article"
    }, f.FIELDS = {
        AUTHOR: "author",
        BODY: "body",
        PRODUCT_TYPE: "product_type",
        TAG: "tag",
        TITLE: "title",
        VARIANTS_BARCODE: "variants.barcode",
        VARIANTS_SKU: "variants.sku",
        VARIANTS_TITLE: "variants.title",
        VENDOR: "vendor"
    }, f.UNAVAILABLE_PRODUCTS = {
        SHOW: "show",
        HIDE: "hide",
        LAST: "last"
    }, f.prototype.query = function (t) {
        try {
            e(t)
        } catch (e) {
            return void this.dispatcher.dispatch("error", e)
        }
        if ("" === t) return this;
        this._currentQuery = y(t);
        var i = this.cache.get(this._currentQuery);
        return i ? (this.dispatcher.dispatch("success", i), this) : (b(this.searchUrl, this.queryParams, t, function (e) {
            this.cache.set(y(e.query), e), y(e.query) === this._currentQuery && (this._retryAfter = null, this.dispatcher.dispatch("success", e))
        }.bind(this), function (e) {
            e.retryAfter && (this._retryAfter = e.retryAfter), this.dispatcher.dispatch("error", e)
        }.bind(this)), this)
    }, f.prototype.on = function (e, t) {
        return this.dispatcher.on(e, t), this
    }, f.prototype.off = function (e, t) {
        return this.dispatcher.off(e, t), this
    }, f
}(), this.Shopify = this.Shopify || {}, this.Shopify.theme = this.Shopify.theme || {}, this.Shopify.theme.PredictiveSearchComponent = function (e) {
    "use strict";

    function t(t) {
        if (!(t && t.selectors && t.selectors.input && c(t.selectors.input) && t.selectors.result && c(t.selectors.result) && t.resultTemplateFct && d(t.resultTemplateFct) && t.numberOfResultsTemplateFct && d(t.numberOfResultsTemplateFct) && t.loadingResultsMessageTemplateFct && d(t.loadingResultsMessageTemplateFct))) {
            var o = new TypeError("PredictiveSearchComponent config is not valid");
            throw o.type = "argument", o
        }
        this.nodes = i(t.selectors), s(this.nodes) ? (this.searchUrl = t.searchUrl || "search", this._searchKeyword = "", this.resultTemplateFct = t.resultTemplateFct, this.numberOfResultsTemplateFct = t.numberOfResultsTemplateFct, this.loadingResultsMessageTemplateFct = t.loadingResultsMessageTemplateFct, this.numberOfResults = t.numberOfResults || 4, this.classes = {
            visibleVariant: t.visibleVariant ? t.visibleVariant : "predictive-search-wrapper--visible",
            itemSelected: t.itemSelectedClass ? t.itemSelectedClass : "predictive-search-item--selected",
            clearButtonVisible: t.clearButtonVisibleClass ? t.clearButtonVisibleClass : "predictive-search__clear-button--visible"
        }, this.selectors = {
            searchResult: t.searchResult ? t.searchResult : "[data-search-result]"
        }, this.callbacks = n(t), r(this.nodes.input), this._addInputEventListeners(), this._addBodyEventListener(), this._addAccessibilityAnnouncer(), this._toggleClearButtonVisibility(), this.predictiveSearch = new e(t.PredictiveSearchAPIConfig ? t.PredictiveSearchAPIConfig : u, this.searchUrl), this.predictiveSearch.on("success", this._handlePredictiveSearchSuccess.bind(this)), this.predictiveSearch.on("error", this._handlePredictiveSearchError.bind(this))) : console.warn("Could not find valid nodes")
    }

    function i(e) {
        return {
            input: document.querySelector(e.input),
            reset: document.querySelector(e.reset),
            result: document.querySelector(e.result)
        }
    }

    function s(e) {
        return !!(e && e.input && e.result && "INPUT" === e.input.tagName)
    }

    function n(e) {
        return {
            onBodyMousedown: e.onBodyMousedown,
            onBeforeOpen: e.onBeforeOpen,
            onOpen: e.onOpen,
            onBeforeClose: e.onBeforeClose,
            onClose: e.onClose,
            onInputFocus: e.onInputFocus,
            onInputKeyup: e.onInputKeyup,
            onInputBlur: e.onInputBlur,
            onInputReset: e.onInputReset,
            onBeforeDestroy: e.onBeforeDestroy,
            onDestroy: e.onDestroy
        }
    }

    function r(e) {
        e.setAttribute("autocorrect", "off"), e.setAttribute("autocomplete", "off"), e.setAttribute("autocapitalize", "off"), e.setAttribute("spellcheck", "false")
    }

    function o(e) {
        e.removeAttribute("autocorrect", "off"), e.removeAttribute("autocomplete", "off"), e.removeAttribute("autocapitalize", "off"), e.removeAttribute("spellcheck", "false")
    }

    function a(e) {
        return Object.prototype.toString.call(e)
    }

    function c(e) {
        return "[object String]" === a(e)
    }

    function l(e) {
        return "[object Boolean]" === a(e)
    }

    function d(e) {
        return "[object Function]" === a(e)
    }
    e = e && e.hasOwnProperty("default") ? e.default : e;
    var u = {
        resources: {
            type: [e.TYPES.PRODUCT, e.TYPES.ARTICLE],
            options: {
                unavailable_products: e.UNAVAILABLE_PRODUCTS.LAST,
                fields: [e.FIELDS.TITLE, e.FIELDS.VENDOR, e.FIELDS.PRODUCT_TYPE, e.FIELDS.VARIANTS_TITLE]
            }
        }
    };
    return t.prototype.isResultVisible = !1, t.prototype.results = {}, t.prototype._latencyTimer = null, t.prototype._resultNodeClicked = !1, t.prototype._addInputEventListeners = function () {
        var e = this.nodes.input,
            t = this.nodes.reset;
        e && (this._handleInputFocus = this._handleInputFocus.bind(this), this._handleInputBlur = this._handleInputBlur.bind(this), this._handleInputKeyup = this._handleInputKeyup.bind(this), this._handleInputKeydown = this._handleInputKeydown.bind(this), e.addEventListener("focus", this._handleInputFocus), e.addEventListener("blur", this._handleInputBlur), e.addEventListener("keyup", this._handleInputKeyup), e.addEventListener("keydown", this._handleInputKeydown), t && (this._handleInputReset = this._handleInputReset.bind(this), t.addEventListener("click", this._handleInputReset)))
    }, t.prototype._removeInputEventListeners = function () {
        var e = this.nodes.input;
        e.removeEventListener("focus", this._handleInputFocus), e.removeEventListener("blur", this._handleInputBlur), e.removeEventListener("keyup", this._handleInputKeyup), e.removeEventListener("keydown", this._handleInputKeydown)
    }, t.prototype._addBodyEventListener = function () {
        this._handleBodyMousedown = this._handleBodyMousedown.bind(this), document.querySelector("body").addEventListener("mousedown", this._handleBodyMousedown)
    }, t.prototype._removeBodyEventListener = function () {
        document.querySelector("body").removeEventListener("mousedown", this._handleBodyMousedown)
    }, t.prototype._removeClearButtonEventListener = function () {
        var e = this.nodes.reset;
        e && e.removeEventListener("click", this._handleInputReset)
    }, t.prototype._handleBodyMousedown = function (e) {
        if (this.isResultVisible && null !== this.nodes)
            if (e.target.isEqualNode(this.nodes.input) || this.nodes.input.contains(e.target) || e.target.isEqualNode(this.nodes.result) || this.nodes.result.contains(e.target)) this._resultNodeClicked = !0;
            else if (d(this.callbacks.onBodyMousedown)) {
                var t = this.callbacks.onBodyMousedown(this.nodes);
                l(t) && t && this.close()
            } else this.close()
    }, t.prototype._handleInputFocus = function (e) {
        if (d(this.callbacks.onInputFocus)) {
            var t = this.callbacks.onInputFocus(this.nodes);
            if (l(t) && !t) return !1
        }
        return e.target.value.length > 0 && this._search(), !0
    }, t.prototype._handleInputBlur = function () {
        return setTimeout(function () {
            if (d(this.callbacks.onInputBlur)) {
                var e = this.callbacks.onInputBlur(this.nodes);
                if (l(e) && !e) return !1
            }
            return !document.activeElement.isEqualNode(this.nodes.reset) && (this._resultNodeClicked ? (this._resultNodeClicked = !1, !1) : void this.close())
        }.bind(this)), !0
    }, t.prototype._addAccessibilityAnnouncer = function () {
        this._accessibilityAnnouncerDiv = window.document.createElement("div"), this._accessibilityAnnouncerDiv.setAttribute("style", "position: absolute !important; overflow: hidden; clip: rect(0 0 0 0); height: 1px; width: 1px; margin: -1px; padding: 0; border: 0;"), this._accessibilityAnnouncerDiv.setAttribute("data-search-announcer", ""), this._accessibilityAnnouncerDiv.setAttribute("aria-live", "polite"), this._accessibilityAnnouncerDiv.setAttribute("aria-atomic", "true"), this.nodes.result.parentElement.appendChild(this._accessibilityAnnouncerDiv)
    }, t.prototype._removeAccessibilityAnnouncer = function () {
        this.nodes.result.parentElement.removeChild(this._accessibilityAnnouncerDiv)
    }, t.prototype._updateAccessibilityAttributesAfterSelectingElement = function (e, t) {
        this.nodes.input.setAttribute("aria-activedescendant", t.id), e && e.removeAttribute("aria-selected"), t.setAttribute("aria-selected", !0)
    }, t.prototype._clearAriaActiveDescendant = function () {
        this.nodes.input.setAttribute("aria-activedescendant", "")
    }, t.prototype._announceNumberOfResultsFound = function (e) {
        var t = this._accessibilityAnnouncerDiv.innerHTML,
            i = this.numberOfResultsTemplateFct(e);
        t === i && (i += "&nbsp;"), this._accessibilityAnnouncerDiv.innerHTML = i
    }, t.prototype._announceLoadingState = function () {
        this._accessibilityAnnouncerDiv.innerHTML = this.loadingResultsMessageTemplateFct()
    }, t.prototype._handleInputKeyup = function (e) {
        var t = 38,
            i = 40,
            s = 13,
            n = 27;
        if (d(this.callbacks.onInputKeyup)) {
            var r = this.callbacks.onInputKeyup(this.nodes);
            if (l(r) && !r) return !1
        }
        if (this._toggleClearButtonVisibility(), this.isResultVisible && null !== this.nodes) {
            if (e.keyCode === t) return this._navigateOption(e, "UP"), !0;
            if (e.keyCode === i) return this._navigateOption(e, "DOWN"), !0;
            if (e.keyCode === s) return this._selectOption(), !0;
            e.keyCode === n && this.close()
        }
        return e.target.value.length <= 0 ? (this.close(), this._setKeyword("")) : e.target.value.length > 0 && this._search(), !0
    }, t.prototype._handleInputKeydown = function (e) {
        var t = 13,
            i = 38,
            s = 40;
        e.keyCode === t && null !== this._getSelectedOption() && e.preventDefault(), e.keyCode !== i && e.keyCode !== s || e.preventDefault()
    }, t.prototype._handleInputReset = function (e) {
        if (e.preventDefault(), d(this.callbacks.onInputReset)) {
            var t = this.callbacks.onInputReset(this.nodes);
            if (l(t) && !t) return !1
        }
        return this.nodes.input.value = "", this.nodes.input.focus(), this._toggleClearButtonVisibility(), this.close(), !0
    }, t.prototype._navigateOption = function (e, t) {
        var i = this._getSelectedOption();
        if (i)
            if ("DOWN" === t) {
                var s = i.nextElementSibling;
                s && (i.classList.remove(this.classes.itemSelected), s.classList.add(this.classes.itemSelected), this._updateAccessibilityAttributesAfterSelectingElement(i, s))
            } else {
                var n = i.previousElementSibling;
                n && (i.classList.remove(this.classes.itemSelected), n.classList.add(this.classes.itemSelected), this._updateAccessibilityAttributesAfterSelectingElement(i, n))
            }
        else {
            var r = this.nodes.result.querySelector(this.selectors.searchResult);
            r.classList.add(this.classes.itemSelected), this._updateAccessibilityAttributesAfterSelectingElement(null, r)
        }
    }, t.prototype._getSelectedOption = function () {
        return this.nodes.result.querySelector("." + this.classes.itemSelected)
    }, t.prototype._selectOption = function () {
        var e = this._getSelectedOption();
        e && e.querySelector("a, button").click()
    }, t.prototype._search = function () {
        var e = this.nodes.input.value;
        this._searchKeyword !== e && (clearTimeout(this._latencyTimer), this._latencyTimer = setTimeout(function () {
            this.results.isLoading = !0, this._announceLoadingState(), this.nodes.result.classList.add(this.classes.visibleVariant), this.nodes.result.innerHTML = this.resultTemplateFct(this.results)
        }.bind(this), 500), this.predictiveSearch.query(e), this._setKeyword(e))
    }, t.prototype._handlePredictiveSearchSuccess = function (e) {
        clearTimeout(this._latencyTimer), this.results = e.resources.results, this.results.isLoading = !1, this.results.products = this.results.products.slice(0, this.numberOfResults), this.results.canLoadMore = this.numberOfResults <= this.results.products.length, this.results.searchQuery = this.nodes.input.value, this.results.products.length > 0 || this.results.searchQuery ? (this.nodes.result.innerHTML = this.resultTemplateFct(this.results), this._announceNumberOfResultsFound(this.results), this.open()) : (this.nodes.result.innerHTML = "", this._closeOnNoResults())
    }, t.prototype._handlePredictiveSearchError = function () {
        clearTimeout(this._latencyTimer), this.nodes.result.innerHTML = "", this._closeOnNoResults()
    }, t.prototype._closeOnNoResults = function () {
        this.nodes && this.nodes.result.classList.remove(this.classes.visibleVariant), this.isResultVisible = !1
    }, t.prototype._setKeyword = function (e) {
        this._searchKeyword = e
    }, t.prototype._toggleClearButtonVisibility = function () {
        this.nodes.reset && (this.nodes.input.value.length > 0 ? this.nodes.reset.classList.add(this.classes.clearButtonVisible) : this.nodes.reset.classList.remove(this.classes.clearButtonVisible))
    }, t.prototype.open = function () {
        if (!this.isResultVisible) {
            if (d(this.callbacks.onBeforeOpen)) {
                var e = this.callbacks.onBeforeOpen(this.nodes);
                if (l(e) && !e) return !1
            }
            return this.nodes.result.classList.add(this.classes.visibleVariant), this.nodes.input.setAttribute("aria-expanded", !0), this.isResultVisible = !0, d(this.callbacks.onOpen) && this.callbacks.onOpen(this.nodes) || !0
        }
    }, t.prototype.close = function () {
        if (!this.isResultVisible) return !0;
        if (d(this.callbacks.onBeforeClose)) {
            var e = this.callbacks.onBeforeClose(this.nodes);
            if (l(e) && !e) return !1
        }
        return this.nodes && this.nodes.result.classList.remove(this.classes.visibleVariant), this.nodes.input.setAttribute("aria-expanded", !1), this._clearAriaActiveDescendant(), this._setKeyword(""), d(this.callbacks.onClose) && this.callbacks.onClose(this.nodes), this.isResultVisible = !1, this.results = {}, !0
    }, t.prototype.destroy = function () {
        if (this.close(), d(this.callbacks.onBeforeDestroy)) {
            var e = this.callbacks.onBeforeDestroy(this.nodes);
            if (l(e) && !e) return !1
        }
        return this.nodes.result.classList.remove(this.classes.visibleVariant), o(this.nodes.input), this._removeInputEventListeners(), this._removeBodyEventListener(), this._removeAccessibilityAnnouncer(), this._removeClearButtonEventListener(), d(this.callbacks.onDestroy) && this.callbacks.onDestroy(this.nodes), !0
    }, t.prototype.clearAndClose = function () {
        this.nodes.input.value = "", this.close()
    }, t
}(Shopify.theme.PredictiveSearch), window.theme = window.theme || {}, theme.TouchEvents = function (e, t) {
    this.axis, this.checkEvents = [], this.eventHandlers = {}, this.eventModel = {}, this.events = [
        ["touchstart", "touchmove", "touchend", "touchcancel"],
        ["pointerdown", "pointermove", "pointerup", "pointercancel"],
        ["mousedown", "mousemove", "mouseup"]
    ], this.eventType, this.difference = {}, this.direction, this.start = {}, this.element = e, this.options = Object.assign({}, {
        dragThreshold: 10,
        start: function () { },
        move: function () { },
        end: function () { }
    }, t), this.checkEvents = this._getCheckEvents(), this.eventModel = this._getEventModel(), this._setupEventHandlers()
}, theme.TouchEvents.prototype = Object.assign({}, theme.TouchEvents.prototype, {
    destroy: function () {
        this.element.removeEventListener("dragstart", this.eventHandlers.preventDefault), this.element.removeEventListener(this.events[this.eventModel][0], this.eventHandlers.touchStart), this.eventModel || this.element.removeEventListener(this.events[2][0], this.eventHandlers.touchStart), this.element.removeEventListener("click", this.eventHandlers.preventClick)
    },
    _setupEventHandlers: function () {
        this.eventHandlers.preventDefault = this._preventDefault.bind(this), this.eventHandlers.preventClick = this._preventClick.bind(this), this.eventHandlers.touchStart = this._touchStart.bind(this), this.eventHandlers.touchMove = this._touchMove.bind(this), this.eventHandlers.touchEnd = this._touchEnd.bind(this), this.element.addEventListener("dragstart", this.eventHandlers.preventDefault), this.element.addEventListener(this.events[this.eventModel][0], this.eventHandlers.touchStart), this.eventModel || this.element.addEventListener(this.events[2][0], this.eventHandlers.touchStart), this.element.addEventListener("click", this.eventHandlers.preventClick)
    },
    _touchStart: function (e) {
        this.eventType = this.eventModel, "mousedown" !== e.type || this.eventModel || (this.eventType = 2), this.checkEvents[this.eventType](e) || (this.eventType && this._preventDefault(e), document.addEventListener(this.events[this.eventType][1], this.eventHandlers.touchMove), document.addEventListener(this.events[this.eventType][2], this.eventHandlers.touchEnd), this.eventType < 2 && document.addEventListener(this.events[this.eventType][3], this.eventHandlers.touchEnd), this.start = {
            xPosition: this.eventType ? e.clientX : e.touches[0].clientX,
            yPosition: this.eventType ? e.clientY : e.touches[0].clientY,
            time: (new Date).getTime()
        }, Object.keys(this.difference).forEach(function (e) {
            delete this.difference[e]
        }.bind(this)), this.options.start(e))
    },
    _touchMove: function (e) {
        this.difference = this._getDifference(e), document["on" + this.events[this.eventType][1]] = function (e) {
            this._preventDefault(e)
        }.bind(this), this.axis ? "xPosition" === this.axis ? this.direction = this.difference.xPosition < 0 ? "left" : "right" : "yPosition" === this.axis && (this.direction = this.difference.yPosition < 0 ? "up" : "down") : this.options.dragThreshold < Math.abs(this.difference.xPosition) ? this.axis = "xPosition" : this.options.dragThreshold < Math.abs(this.difference.yPosition) ? this.axis = "yPosition" : this.axis = !1, this.options.move(e, this.direction, this.difference)
    },
    _touchEnd: function (e) {
        document.removeEventListener(this.events[this.eventType][1], this.eventHandlers.touchMove), document.removeEventListener(this.events[this.eventType][2], this.eventHandlers.touchEnd), this.eventType < 2 && document.removeEventListener(this.events[this.eventType][3], this.eventHandlers.touchEnd), document["on" + this.events[this.eventType][1]] = function () {
            return !0
        }, this.options.end(e, this.direction, this.difference), this.axis = !1
    },
    _getDifference: function (e) {
        return {
            xPosition: (this.eventType ? e.clientX : e.touches[0].clientX) - this.start.xPosition,
            yPosition: (this.eventType ? e.clientY : e.touches[0].clientY) - this.start.yPosition,
            time: (new Date).getTime() - this.start.time
        }
    },
    _getCheckEvents: function () {
        return [function (e) {
            return e.touches && e.touches.length > 1 || e.scale && 1 !== e.scale
        }, function (e) {
            return !e.isPrimary || e.buttons && 1 !== e.buttons || "touch" !== e.pointerType && "pen" !== e.pointerType
        }, function (e) {
            return e.buttons && 1 !== e.buttons
        }]
    },
    _getEventModel: function () {
        return window.navigator.pointerEnabled ? 1 : 0
    },
    _preventDefault: function (e) {
        e.preventDefault ? e.preventDefault() : e.returnValue = !1
    },
    _preventClick: function (e) {
        Math.abs(this.difference.xPosition) > this.options.dragThreshold && this._preventDefault(e)
    }
}), theme.Drawers = function () {
    function e(e, t, i) {
        var s = "js-drawer-open",
            n = "js-drawer-close",
            r = {
                selectors: {
                    openVariant: "." + s + "-" + t,
                    close: "." + n
                },
                classes: {
                    open: s,
                    openVariant: s + "-" + t
                },
                withPredictiveSearch: !1
            };
        if (this.nodes = {
            parents: [document.documentElement, document.body],
            page: document.getElementById("PageContainer")
        }, this.eventHandlers = {}, this.config = Object.assign({}, r, i), this.position = t, this.drawer = document.getElementById(e), !this.drawer) return !1;
        this.drawerIsOpen = !1, this.init()
    }
    return e.prototype.init = function () {
        document.querySelector(this.config.selectors.openVariant).addEventListener("click", this.open.bind(this)), this.drawer.querySelector(this.config.selectors.close).addEventListener("click", this.close.bind(this))
    }, e.prototype.open = function (e) {
        var t = !1;
        if (e ? e.preventDefault() : t = !0, e && e.stopPropagation && (e.stopPropagation(), this.activeSource = e.currentTarget), this.drawerIsOpen && !t) return this.close();
        this.config.withPredictiveSearch || theme.Helpers.prepareTransition(this.drawer), this.nodes.parents.forEach(function (e) {
            e.classList.add(this.config.classes.open, this.config.classes.openVariant)
        }.bind(this)), this.drawerIsOpen = !0, this.config.onDrawerOpen && "function" == typeof this.config.onDrawerOpen && (t || this.config.onDrawerOpen()), this.activeSource && this.activeSource.hasAttribute("aria-expanded") && this.activeSource.setAttribute("aria-expanded", "true");
        var i = {
            container: this.drawer
        };
        return this.config.elementToFocusOnOpen && (i.elementToFocus = this.config.elementToFocusOnOpen), slate.a11y.trapFocus(i), this.bindEvents(), this
    }, e.prototype.close = function () {
        this.drawerIsOpen && (document.activeElement.dispatchEvent(new CustomEvent("blur", {
            bubbles: !0,
            cancelable: !0
        })), this.config.withPredictiveSearch || theme.Helpers.prepareTransition(this.drawer), this.nodes.parents.forEach(function (e) {
            e.classList.remove(this.config.classes.open, this.config.classes.openVariant)
        }.bind(this)), this.activeSource && this.activeSource.hasAttribute("aria-expanded") && this.activeSource.setAttribute("aria-expanded", "false"), this.drawerIsOpen = !1, slate.a11y.removeTrapFocus({
            container: this.drawer
        }), this.unbindEvents(), this.config.onDrawerClose && "function" == typeof this.config.onDrawerClose && this.config.onDrawerClose())
    }, e.prototype.bindEvents = function () {
        this.eventHandlers.drawerKeyupHandler = function (e) {
            return 27 !== e.keyCode || (this.close(), !1)
        }.bind(this), this.eventHandlers.drawerTouchmoveHandler = function () {
            return !1
        }, this.eventHandlers.drawerClickHandler = function () {
            return this.close(), !1
        }.bind(this), document.body.addEventListener("keyup", this.eventHandlers.drawerKeyupHandler), this.nodes.page.addEventListener("touchmove", this.eventHandlers.drawerTouchmoveHandler), this.nodes.page.addEventListener("click", this.eventHandlers.drawerClickHandler)
    }, e.prototype.unbindEvents = function () {
        this.nodes.page.removeEventListener("touchmove", this.eventHandlers.drawerTouchmoveHandler), this.nodes.page.removeEventListener("click", this.eventHandlers.drawerClickHandler), document.body.removeEventListener("keyup", this.eventHandlers.drawerKeyupHandler)
    }, e
}(), theme.Helpers = function () {
    function e() {
        d = !0
    }

    function t() {
        return d
    }

    function i() {
        h = window.pageYOffset, document.body.style.top = "-" + h + "px", document.body.classList.add(u.preventScrolling)
    }

    function s() {
        document.body.classList.remove(u.preventScrolling), document.body.style.removeProperty("top"), window.scrollTo(0, h)
    }

    function n(e, t, i) {
        var s;
        return function () {
            var n = this,
                r = arguments,
                o = function () {
                    s = null, i || e.apply(n, r)
                },
                a = i && !s;
            clearTimeout(s), s = setTimeout(o, t), a && e.apply(n, r)
        }
    }

    function r(e, t) {
        return new Promise(function (i, s) {
            function n(e, t) {
                (t || !r.readyState || /loaded|complete/.test(r.readyState)) && (r.onload = null, r.onreadystatechange = null, r = void 0, t ? s() : i())
            }
            var r = document.createElement("script"),
                o = t || document.getElementsByTagName("script")[0];
            r.async = !0, r.defer = !0, r.onload = n, r.onreadystatechange = n, r.src = e, o.parentNode.insertBefore(r, o)
        })
    }

    function o(e) {
        e.addEventListener("transitionend", function (e) {
            e.currentTarget.classList.remove("is-transitioning")
        }, {
            once: !0
        });
        var t = ["transition-duration", "-moz-transition-duration", "-webkit-transition-duration", "-o-transition-duration"],
            i = 0;
        t.forEach(function (t) {
            var s = getComputedStyle(e)[t];
            s && (s.replace(/\D/g, ""), i || (i = parseFloat(s)))
        }), 0 !== i && (e.classList.add("is-transitioning"), e.offsetWidth)
    }

    function a(e) {
        var t = [];
        return Array.prototype.slice.call(e.elements).forEach(function (e) {
            !e.name || e.disabled || ["file", "reset", "submit", "button"].indexOf(e.type) > -1 || ("select-multiple" !== e.type ? ["checkbox", "radio"].indexOf(e.type) > -1 && !e.checked || t.push(encodeURIComponent(e.name) + "=" + encodeURIComponent(e.value)) : Array.prototype.slice.call(e.options).forEach(function (i) {
                i.selected && t.push(encodeURIComponent(e.name) + "=" + encodeURIComponent(i.value))
            }))
        }), t.join("&")
    }

    function c() {
        var e = navigator.cookieEnabled;
        return e || (document.cookie = "testcookie", e = -1 !== document.cookie.indexOf("testcookie")), e
    }

    function l(e) {
        var t = e || theme.stylesheet;
        return void 0 === this.stylesheetPromise && (this.stylesheetPromise = new Promise(function (e) {
            var i = document.querySelector('link[href="' + t + '"]');
            i.loaded && e(), i.addEventListener("load", function () {
                setTimeout(e, 0)
            })
        })), this.stylesheetPromise
    }
    var d = !1,
        u = {
            preventScrolling: "prevent-scrolling"
        },
        h = window.pageYOffset;
    return {
        setTouch: e,
        isTouch: t,
        enableScrollLock: i,
        disableScrollLock: s,
        debounce: n,
        getScript: r,
        prepareTransition: o,
        serialize: a,
        cookiesEnabled: c,
        promiseStylesheet: l
    }
}(), theme.LibraryLoader = function () {
    function e(e, r) {
        var a = o[e];
        if (a && a.status !== n.requested)
            if (r = r || function () { }, a.status !== n.loaded) {
                var c;
                switch (a.status = n.requested, a.type) {
                    case s.script:
                        c = t(a, r);
                        break;
                    case s.link:
                        c = i(a, r)
                }
                c.id = a.tagId, a.element = c;
                var l = document.getElementsByTagName(a.type)[0];
                l.parentNode.insertBefore(c, l)
            } else r()
    }

    function t(e, t) {
        var i = document.createElement("script");
        return i.src = e.src, i.addEventListener("load", function () {
            e.status = n.loaded, t()
        }), i
    }

    function i(e, t) {
        var i = document.createElement("link");
        return i.href = e.src, i.rel = "stylesheet", i.type = "text/css", i.addEventListener("load", function () {
            e.status = n.loaded, t()
        }), i
    }
    var s = {
        link: "link",
        script: "script"
    },
        n = {
            requested: "requested",
            loaded: "loaded"
        },
        r = "https:/cdn.shopify.com/shopifycloud/",
        o = {
            plyrShopifyStyles: {
                tagId: "plyr-shopify-styles",
                src: r + "plyr/v2.0/shopify-plyr.css",
                type: s.link
            },
            modelViewerUiStyles: {
                tagId: "shopify-model-viewer-ui-styles",
                src: r + "model-viewer-ui/assets/v1.0/model-viewer-ui.css",
                type: s.link
            }
        };
    return {
        load: e
    }
}(), window.theme = window.theme || {}, theme.Header = function () {
    function e() {
        i(), r(document.querySelectorAll(p.siteNavHasDropdown)), a(), v.parents.forEach(function (e) {
            e.addEventListener("click", d)
        }), v.siteNavChildLink.forEach(function (e) {
            e.addEventListener("focusout", u)
        }), v.topLevel.forEach(function (e) {
            e.addEventListener("focus", n)
        }), v.subMenuLinks.forEach(function (e) {
            e.addEventListener("click", t)
        }), window.addEventListener("resize", l)
    }

    function t(e) {
        e.stopImmediatePropagation()
    }

    function i() {
        var e = document.querySelector(p.navigation);
        v = {
            nav: e,
            topLevel: document.querySelectorAll(p.siteNavLinkMain),
            parents: e.querySelectorAll(p.siteNavHasDropdown),
            subMenuLinks: document.querySelectorAll(p.siteNavChildLinks),
            activeDropdown: document.querySelector(p.siteNavActiveDropdown),
            siteHeader: document.querySelector(p.siteHeader),
            siteNavChildLink: document.querySelectorAll(p.siteNavChildLink)
        }
    }

    function s(e) {
        e.classList.add(m.activeClass), v.activeDropdown && n(), v.activeDropdown = e, e.querySelector(p.siteNavLinkMain).setAttribute("aria-expanded", "true"), setTimeout(function () {
            window.addEventListener("keyup", c), document.body.addEventListener("click", n)
        }, 250)
    }

    function n() {
        v.activeDropdown && (v.activeDropdown.querySelector(p.siteNavLinkMain).setAttribute("aria-expanded", "false"), v.activeDropdown.classList.remove(m.activeClass), v.activeDropdown = document.querySelector(p.siteNavActiveDropdown), window.removeEventListener("keyup", c), document.body.removeEventListener("click", n))
    }

    function r(e) {
        e.forEach(function (e) {
            var t = e.querySelector(p.siteNavDropdown);
            t && (o(e) ? (t.classList.remove(m.leftDropdownClass), t.classList.add(m.rightDropdownClass)) : (t.classList.remove(m.rightDropdownClass), t.classList.add(m.leftDropdownClass)))
        })
    }

    function o(e) {
        var t = e.getBoundingClientRect(),
            i = e.ownerDocument.defaultView,
            s = t.left + i.pageXOffset,
            n = Math.floor(v.siteHeader.offsetWidth) / 2;
        return s > n
    }

    function a() {
        document.querySelectorAll(p.siteNavHasCenteredDropdown).forEach(function (e) {
            var t = e.querySelector(p.siteNavCenteredDropdown),
                i = e.offsetTop + 41;
            t.style.top = i + "px"
        })
    }

    function c(e) {
        27 === e.keyCode && n()
    }

    function l() {
        f()
    }

    function d(e) {
        var t = e.currentTarget;
        t.classList.contains(m.activeClass) ? n() : s(t)
    }

    function u() {
        setTimeout(function () {
            !document.activeElement.classList.contains(m.childLinkClass) && v.activeDropdown && n()
        })
    }

    function h() {
        v.topLevel.forEach(function (e) {
            e.removeEventListener("focus", n)
        }), v.subMenuLinks.forEach(function (e) {
            e.removeEventListener("click", t)
        }), v.parents.forEach(function (e) {
            e.removeEventListener("click", d)
        }), v.siteNavChildLink.forEach(function (e) {
            e.removeEventListener("focusout", u)
        }), window.removeEventListener("resize", l), window.removeEventListener("keyup", c), document.body.removeEventListener("click", n)
    }
    var p = {
        body: "body",
        navigation: "#AccessibleNav",
        siteNavHasDropdown: "[data-has-dropdowns]",
        siteNavChildLinks: ".site-nav__child-link",
        siteNavActiveDropdown: ".site-nav--active-dropdown",
        siteNavHasCenteredDropdown: ".site-nav--has-centered-dropdown",
        siteNavCenteredDropdown: ".site-nav__dropdown--centered",
        siteNavLinkMain: ".site-nav__link--main",
        siteNavChildLink: ".site-nav__link--last",
        siteNavDropdown: ".site-nav__dropdown",
        siteHeader: ".header"
    },
        m = {
            activeClass: "site-nav--active-dropdown",
            childLinkClass: "site-nav__child-link",
            rightDropdownClass: "site-nav__dropdown--right",
            leftDropdownClass: "site-nav__dropdown--left"
        },
        v = {},
        f = theme.Helpers.debounce(function () {
            r(document.querySelectorAll(p.siteNavHasDropdown)), a()
        }, 50);
    return {
        init: e,
        unload: h
    }
}(), window.theme = window.theme || {}, theme.MobileNav = function () {
    function e() {
        s(), v.mobileNavToggle && v.mobileNavToggle.addEventListener("click", i), v.subNavToggleBtns.forEach(function (e) {
            e.addEventListener("click", c)
        }), g.addListener(t)
    }

    function t() {
        g.matches && v.mobileNavContainer.classList.contains(m.navOpen) && o()
    }

    function i() {
        var e = v.mobileNavToggle.classList.contains(m.mobileNavCloseIcon);
        e ? o() : n()
    }

    function s() {
        v = {
            pageContainer: document.querySelector("#PageContainer"),
            siteHeader: document.querySelector(".header"),
            mobileNavToggle: document.querySelector(".js-mobile-nav-toggle"),
            mobileNavContainer: document.querySelector(".mobile-nav-wrapper"),
            mobileNav: document.querySelector("#MobileNav"),
            sectionHeader: document.querySelector("#shopify-section-header"),
            subNavToggleBtns: document.querySelectorAll("." + m.subNavToggleBtn)
        }
    }

    function n() {
        var e = v.siteHeader.offsetHeight;
        theme.Helpers.prepareTransition(v.mobileNavContainer), v.mobileNavContainer.classList.add(m.navOpen), v.mobileNavContainer.style.transform = "translateY(" + e + "px)", v.pageContainer.style.transform = "translate3d(0, " + v.mobileNavContainer.scrollHeight + "px, 0)", slate.a11y.trapFocus({
            container: v.sectionHeader,
            elementToFocus: v.mobileNavToggle
        }), v.mobileNavToggle.classList.add(m.mobileNavCloseIcon), v.mobileNavToggle.classList.remove(m.mobileNavOpenIcon), v.mobileNavToggle.setAttribute("aria-expanded", !0), window.addEventListener("keyup", r)
    }

    function r(e) {
        27 === e.which && o()
    }

    function o() {
        theme.Helpers.prepareTransition(v.mobileNavContainer), v.mobileNavContainer.classList.remove(m.navOpen), v.mobileNavContainer.style.transform = "translateY(-100%)", v.pageContainer.setAttribute("style", ""), slate.a11y.trapFocus({
            container: document.querySelector("html"),
            elementToFocus: document.body
        }), v.mobileNavContainer.addEventListener("transitionend", a, {
            once: !0
        }), v.mobileNavToggle.classList.add(m.mobileNavOpenIcon), v.mobileNavToggle.classList.remove(m.mobileNavCloseIcon), v.mobileNavToggle.setAttribute("aria-expanded", !1), v.mobileNavToggle.focus(), window.removeEventListener("keyup", r), window.scrollTo(0, 0)
    }

    function a() {
        slate.a11y.removeTrapFocus({
            container: v.mobileNav
        })
    }

    function c(e) {
        if (!u) {
            var t = e.currentTarget,
                i = t.classList.contains(m.return);
            if (u = !0, i) {
                var s = document.querySelectorAll("." + m.subNavToggleBtn + "[data-level='" + (f - 1) + "']");
                s.forEach(function (e) {
                    e.classList.remove(m.subNavActive)
                }), p && p.classList.remove(m.subNavActive)
            } else t.classList.add(m.subNavActive);
            p = t, l(t.getAttribute("data-target"))
        }
    }

    function l(e) {
        function t() {
            slate.a11y.trapFocus({
                container: r
            }), v.mobileNavContainer.removeEventListener("transitionend", t), u = !1
        }
        var i = e ? document.querySelector('.mobile-nav__dropdown[data-parent="' + e + '"]') : v.mobileNav;
        f = i.dataset.level ? Number(i.dataset.level) : 1, h && (theme.Helpers.prepareTransition(h), h.classList.add(m.subNavClosing)), h = i;
        var s = i.offsetHeight,
            n = f > 2 ? m.thirdNavShowing : m.subNavShowing;
        v.mobileNavContainer.style.height = s + "px", v.mobileNavContainer.classList.remove(m.thirdNavShowing), v.mobileNavContainer.classList.add(n), e || v.mobileNavContainer.classList.remove(m.thirdNavShowing, m.subNavShowing);
        var r = 1 === f ? v.sectionHeader : i;
        v.mobileNavContainer.addEventListener("transitionend", t, {
            once: !0
        }), v.pageContainer.style.transform = "translateY(" + s + "px)", h.classList.remove(m.subNavClosing)
    }

    function d() {
        g.removeListener(t)
    }
    var u, h, p, m = {
        mobileNavOpenIcon: "mobile-nav--open",
        mobileNavCloseIcon: "mobile-nav--close",
        navLinkWrapper: "mobile-nav__item",
        navLink: "mobile-nav__link",
        subNavLink: "mobile-nav__sublist-link",
        return: "mobile-nav__return-btn",
        subNavActive: "is-active",
        subNavClosing: "is-closing",
        navOpen: "js-menu--is-open",
        subNavShowing: "sub-nav--is-open",
        thirdNavShowing: "third-nav--is-open",
        subNavToggleBtn: "js-toggle-submenu"
    },
        v = {},
        f = 1,
        y = "(min-width: " + theme.breakpoints.medium + "px)",
        g = window.matchMedia(y);
    return {
        init: e,
        unload: d,
        closeMobileNav: o
    }
}(), window.Drawer = function () {
    function e(e) {
        this.container = e, this.drawerName = this.container.getAttribute("data-drawer"), this.selectors = {
            mainContent: ".main-content",
            pageOverlay: ".page-overlay",
            open: '[data-open-drawer="' + this.drawerName + '"]',
            close: "[data-drawer-close]"
        }, this.drawerIsOpen = !1, this.openElement = document.querySelectorAll(this.selectors.open), this.init()
    }
    return e.prototype.init = function () {
        this.openElement.length > 0 && this.openElement.forEach(function (e) {
            e.addEventListener("click", this.open.bind(this))
        }, this), this.container.querySelector(this.selectors.close).addEventListener("click", this.close.bind(this))
    }, e.prototype.open = function (e) {
        document.querySelector(this.selectors.pageOverlay).classList.add("is-visible"), this.container.setAttribute("aria-hidden", !1), this.drawerIsOpen = !0, document.body.classList.add("prevent-scrolling"), this.bindEvents()
    }, e.prototype.close = function (e) {

        if (e) {

            if (e.target.parentNode.parentNode.getAttribute('data-drawer') == 'confirm-delivery-date' && e.target.hasAttribute('data-drawer-close')) {

                if (document.querySelector('[data-drawer="age-check"]')) {

                    new window.Drawer(document.querySelector('[data-drawer="age-check"]')).close();

                }

            }

            if (e.target.hasAttribute('data-drawer-close')) {

                document.querySelector('input[data-cart-calendar]').value = '';

            }
        }


        document.querySelector(this.selectors.pageOverlay).classList.remove("is-visible"), this.container.setAttribute("aria-hidden", !0), this.drawerIsOpen = !1, document.body.classList.remove("prevent-scrolling"), this.unbindEvents()
    }, e.prototype.keyupHandler = function (e) {
        27 === e.keyCode && this.close()
    }, e.prototype.bindEvents = function () {
        this.keyupHandler = this.keyupHandler.bind(this), this.clickHandler = this.clickHandler.bind(this), document.body.addEventListener("keyup", this.keyupHandler), document.body.addEventListener("click", this.clickHandler)
    }, e.prototype.unbindEvents = function () {
        document.body.removeEventListener("keyup", this.keyupHandler), document.body.removeEventListener("click", this.clickHandler)
    }, e.prototype.keyupHandler = function (e) {
        27 === e.keyCode && this.close()
    }, e.prototype.clickHandler = function (e) {
        e.target.classList.contains("page-overlay") && this.close()
    }, e
}(), window.Modals = function () {
    function e(e, t, i) {
        var s = {
            close: ".js-modal-close",
            open: ".js-modal-open-" + t,
            openClass: "modal--is-active",
            closeModalOnClick: !1
        };
        if (this.modal = document.getElementById(e), !this.modal) return !1;
        this.nodes = {
            parents: [document.querySelector("html"), document.body]
        }, this.config = Object.assign(s, i), this.modalIsOpen = !1, this.focusOnOpen = this.config.focusOnOpen ? document.getElementById(this.config.focusOnOpen) : this.modal, this.openElement = document.querySelector(this.config.open), this.init()
    }
    return e.prototype.init = function () {
        this.openElement.addEventListener("click", this.open.bind(this)), this.modal.querySelector(this.config.close).addEventListener("click", this.closeModal.bind(this))
    }, e.prototype.open = function (e) {
        var t = this,
            i = !1;
        this.modalIsOpen || (e ? e.preventDefault() : i = !0, e && e.stopPropagation && e.stopPropagation(), this.modalIsOpen && !i && this.closeModal(), this.modal.classList.add(this.config.openClass), this.nodes.parents.forEach(function (e) {
            e.classList.add(t.config.openClass)
        }), this.modalIsOpen = !0, slate.a11y.trapFocus({
            container: this.modal,
            elementToFocus: this.focusOnOpen
        }), this.bindEvents())
    }, e.prototype.closeModal = function () {
        if (this.modalIsOpen) {
            document.activeElement.blur(), this.modal.classList.remove(this.config.openClass);
            var e = this;
            this.nodes.parents.forEach(function (t) {
                t.classList.remove(e.config.openClass)
            }), this.modalIsOpen = !1, slate.a11y.removeTrapFocus({
                container: this.modal
            }), this.openElement.focus(), this.unbindEvents()
        }
    }, e.prototype.bindEvents = function () {
        this.keyupHandler = this.keyupHandler.bind(this), this.clickHandler = this.clickHandler.bind(this), document.body.addEventListener("keyup", this.keyupHandler), document.body.addEventListener("click", this.clickHandler)
    }, e.prototype.unbindEvents = function () {
        document.body.removeEventListener("keyup", this.keyupHandler), document.body.removeEventListener("click", this.clickHandler)
    }, e.prototype.keyupHandler = function (e) {
        27 === e.keyCode && this.closeModal()
    }, e.prototype.clickHandler = function (e) {
        this.config.closeModalOnClick && !this.modal.contains(e.target) && this.closeModal()
    }, e
}(),
    function () {
        function e(e) {
            var t = document.createElement("a");
            return t.ref = e, t.hostname
        }
        var t = {
            backButton: ".return-link"
        },
            i = document.querySelector(t.backButton);
        document.referrer && i && window.history.length && i.addEventListener("click", function (t) {
            t.preventDefault();
            var i = e(document.referrer),
                s = e(window.location.href);
            return s === i && history.back(), !1
        }, {
            once: !0
        })
    }(), theme.Countdown = function () {
        function e(e) {
            this.container = e, this.deadline = e.getAttribute(t.timeCountdown).replace(/\-/g, "/"), this.total = Date.parse(this.deadline) - Date.parse(new Date), this.total > 0 && (this.timeinterval = null, this._init())
        }
        var t = {
            timeCountdown: "data-countdown"
        };
        return e.prototype = Object.assign({}, e.prototype, {
            _init: function () {
                this.timeInterval = setInterval(this._getTimeRemaining.bind(this), 1e3)
            },
            _getTimeRemaining: function () {
                this.total = Date.parse(this.deadline) - Date.parse(new Date), this.total <= 0 && (clearInterval(this.timeInterval), window.location.href += "?timestamp=" + Date.now()), this.seconds = Math.floor(this.total / 1e3 % 60), this.minutes = Math.floor(this.total / 1e3 / 60 % 60), this.hours = Math.floor(this.total / 36e5 % 24), this.days = Math.floor(this.total / 864e5), this.container.innerHTML = this.hours + "h " + this.minutes + "m " + this.seconds + "s"
            }
        }), e
    }(), theme.QtySelector = function () {
        function e(e) {
            this.container = e, this.eventHandlers = {}, this.quantity = e.querySelector(t.quantity), this.operators = e.querySelectorAll(t.operators), this.maxQuantity = this.container.getAttribute(i.maxQuantity), this._init(), this._setupEventHandlers()
        }
        var t = {
            quantity: "[data-qtyselector-qty]",
            operators: "[data-qtyselector-operator]"
        },
            i = {
                operatorType: "data-qtyselector-operator",
                maxQuantity: "data-qtyselector-max"
            };
        return e.prototype = Object.assign({}, e.prototype, {
            _init: function () {
                1 == this.quantity.value && (this.operators[0].disabled = !0), this.quantity.value == this.maxQuantity && (this.operators[1].disabled = !0)
            },
            _setupEventHandlers: function () {
                this.eventHandlers.onclickOperator = this._onClickOperator.bind(this), this.operators.forEach(function (e) {
                    e.addEventListener("click", this.eventHandlers.onclickOperator)
                }, this)
            },
            _onClickOperator: function (e) {
                e.preventDefault();
                let t = e.currentTarget.getAttribute(i.operatorType),
                    s = parseInt(this.quantity.value);

                let quantityEl = e.currentTarget.parentElement.querySelector('[data-qtyselector-qty]');
                let plusEl = e.currentTarget.parentElement.querySelector('[data-qtyselector-operator="plus"]');
                let minusEl = e.currentTarget.parentElement.querySelector('[data-qtyselector-operator="minus"]');

                const data = {
                    cartMax: quantityEl.dataset.cartMax ? parseInt(quantityEl.dataset.cartMax) : 0,
                    cartMin: quantityEl.dataset.cartMin ? parseInt(quantityEl.dataset.cartMin) : 1,
                    step: quantityEl.dataset.step ? parseInt(quantityEl.dataset.step) : 1,
                };

                console.log(data);

                switch (t) {
                    case "plus":
                        if (data.cartMax == 0) {
                            s += 1;
                        } else {
                            // stops user adding more than limit to cart.
                            if (s < data.cartMax) {
                                s += 1;
                            }
                            if (s == data.cartMax) {
                                plusEl.disabled = true;
                            }
                        }
                        break;
                    case "minus":
                        // stops user adding less than limit to cart.
                        if (s > data.cartMin) {
                            s -= 1;

                            if (s == data.cartMin) {
                                minusEl.disabled = true;
                            }
                        }
                }
                this.operators.forEach(function (e) {
                    e.disabled = !1
                }), 0 == s && (e.currentTarget.disabled = !0, s = 1), this.maxQuantity && s > this.maxQuantity && (e.currentTarget.disabled = !0, s = this.maxQuantity), this._modifyQuantity(s)
            },
            _modifyQuantity: function (e) {
                this.quantity.value = e, this.quantity.dispatchEvent(new Event("change"))
            }
        }), e
    }(), theme.QuickAdd = function () {
        function e(e) {
            this.container = e, this.eventHandlers = {}, this.cartCount = document.querySelector(t.cartCount), this.deliveryProduct = document.querySelector(t.deliveryProduct), this.form = e.querySelector(t.form), this.selector = e.querySelector(t.selector), this.itemCount = e.querySelectorAll(t.itemCount), this.itemQty = e.querySelector(t.itemQty), this.selectorOperators = e.querySelectorAll(t.selectorOperator), this.variantId = e.querySelector(t.variantId).value, this.loader = e.querySelector(t.loader), this._setupEventHandlers()
        }
        var t = {
            cartCount: "[data-cart-count]",
            deliveryProduct: "[data-cart-delivery-product]",
            form: "[data-quickadd-form]",
            selector: "[data-quickadd-selector]",
            itemCount: "[data-quickadd-count]",
            itemQty: "[data-quickadd-itemqty]",
            selectorOperator: "[data-quickadd-operator]",
            variantId: "[data-variant-id]",
            loader: "[data-quickadd-loader]"
        },
            i = {
                hiddenClass: "is-hidden",
                operatorType: "data-quickadd-operator-type"
            };
        return e.prototype = Object.assign({}, e.prototype, {
            _setupEventHandlers: function () {
                this.eventHandlers.onsubmit = this._onSubmit.bind(this), this.eventHandlers.onclickOperator = this._onClickOperator.bind(this), this.form.addEventListener("submit", this.eventHandlers.onsubmit), this.selectorOperators.forEach(function (e) {
                    e.addEventListener("click", this.eventHandlers.onclickOperator)
                }, this)
            },
            _onSubmit: function (e) {
                e.preventDefault();
                try {
                    this._addToCart()
                } catch (e) {
                    alert("There was an error. Please try again.")
                }
            },
            _onClickOperator: function (e) {
                let t = e.currentTarget.getAttribute(i.operatorType),
                    s = parseInt(this.itemCount[0].textContent);

                const data = {
                    cartMax: this.itemCount[0].dataset.cartMax ? parseInt(this.itemCount[0].dataset.cartMax) : 0,
                    cartMin: this.itemCount[0].dataset.cartMin ? parseInt(this.itemCount[0].dataset.cartMin) : 1,
                    step: this.itemCount[0].dataset.step ? parseInt(this.itemCount[0].dataset.step) : 1,
                };

                switch (t) {
                    case "plus":
                        s += 1;
                        // stops user adding more than limit to cart.
                        if (s == data.cartMax) {
                            e.currentTarget.disabled = true;
                        }
                        break;
                    case "minus":
                        s -= 1
                        // stops user adding less than limit to cart.
                        if (s < data.cartMin) {
                            s = 0
                        } else {
                            e.currentTarget.parentElement.querySelector('[data-quickadd-operator-type="plus"]').disabled = false;
                        }
                }

                this._modifyVariant(s)
            },
            _hideForm: function () {
                this.form.classList.add(i.hiddenClass)
            },
            _showForm: function () {
                this.form.classList.remove(i.hiddenClass)
            },
            _hideSelector: function () {
                this.selector.classList.add(i.hiddenClass), this.itemQty.classList.add(i.hiddenClass)
            },
            _showSelector: function () {
                this.selector.classList.remove(i.hiddenClass), this.itemQty.classList.remove(i.hiddenClass)
            },
            _hideLoader: function () {
                this.loader.classList.add(i.hiddenClass)
            },
            _showLoader: function () {
                this.loader.classList.remove(i.hiddenClass)
            },
            _updateItemCount: function (e) {
                if (0 == e) return !1;
                this.itemCount.forEach(function (t) {
                    t.textContent = e
                })
            },
            _updateCartCount: function (e) {
                this.deliveryProduct && (e -= 1), this.cartCount.textContent = e;
            },
            _modifyVariant: function (e) {
                this._showLoader();
                let t = {
                    id: this.variantId,
                    quantity: e
                };
                fetch("/cart/change.js", {
                    method: "POST",
                    headers: {
                        "Content-Type": "applicationjson"
                    },
                    body: JSON.stringify(t)
                }).then(e => {
                    if (!e.ok) throw Error(e.statusText);
                    return e.json()
                }).then(t => {
                    0 == e && (this._hideSelector(), this._showForm()), this._updateItemCount(e), this._updateCartCount(t.item_count), this._hideLoader()
                }).catch(e => e)
            },
            _addToCart: function () {
                this._showLoader(), fetch("/cart/add.js", {
                    method: "POST",
                    body: new FormData(this.form)
                }).then(e => {
                    if (!e.ok) throw Error(e.statusText);
                    return e.json()
                }).then(e => {
                    let _current = parseInt(this.cartCount.textContent);
                    let t = _current + e.quantity;

                    this._showSelector(), this._hideForm(), this._updateItemCount(e.quantity), this._updateCartCount(t), this._hideLoader()
                }).catch(e => e)
            }
        }), e
    }(), theme.Slideshow = function () {
        function e(e, s) {
            this.container = e, this.slider = this.container.querySelector(t.slider), this.slider && (this.eventHandlers = {}, this.lastSlide = 0, this.slideIndex = 0, this.sliderContainer = null, this.slides = [], this.options = Object.assign({}, {
                autoplay: !1,
                canUseKeyboardArrows: !0,
                canUseTouchEvents: !1,
                slideActiveClass: i.slideActive,
                slideInterval: 0,
                slidesToShow: 0,
                slidesToScroll: 1,
                type: "fade",
                outerEdgeLimit: !0
            }, s), this.sliderContainer = this.slider.querySelector(t.sliderContainer), this.adaptHeight = "true" === this.sliderContainer.getAttribute("data-adapt-height"), this.slides = Array.from(this.sliderContainer.querySelectorAll(t.sliderItem)), this.lastSlide = this.slides.length - 1, this.buttons = this.container.querySelectorAll(t.button), this.pause = this.container.querySelector(t.pause), this.indicators = this.container.querySelectorAll(t.indicators), this.slides.length <= 1 || (this.timeout = 250, this.options.autoplay && this.startAutoplay(), this.adaptHeight && this.setSlideshowHeight(), "slide" === this.options.type ? (this.isFirstSlide = !1, this.isLastSlide = !1, this.sliderItemWidthTotal = 0, this.sliderTrack = this.slider.querySelector(t.sliderTrack), this.sliderItemWidthTotal = 0, theme.Helpers.promiseStylesheet().then(function () {
                this._setupSlideType()
            }.bind(this))) : this.setupSlider(0), this._setupEventHandlers()))
        }
        var t = {
            button: "[data-slider-button]",
            indicator: "[data-slider-indicator]",
            indicators: "[data-slider-indicators]",
            pause: "[data-slider-pause]",
            slider: "[data-slider]",
            sliderItem: "[data-slider-item]",
            sliderItemLink: "[data-slider-item-link]",
            sliderTrack: "[data-slider-track]",
            sliderContainer: "[data-slider-container]"
        },
            i = {
                isPaused: "slideshow__pause--is-paused",
                indicator: "slider-indicators__item",
                indicatorActive: "slick-active",
                sliderInitialized: "slick-initialized",
                slideActive: "slideshow__slide--active",
                slideClone: "slick-cloned"
            },
            s = {
                buttonNext: "data-slider-button-next"
            };
        return e.prototype = Object.assign({}, e.prototype, {
            previousSlide: function () {
                this._move()
            },
            nextSlide: function () {
                this._move("next")
            },
            setSlide: function (e) {
                this._setPosition(Number(e))
            },
            startAutoplay: function () {
                this.isAutoPlaying = !0, window.clearTimeout(this.autoTimeOut), this.autoTimeOut = window.setTimeout(function () {
                    var e = this._getNextSlideIndex("next");
                    this._setPosition(e)
                }.bind(this), this.options.slideInterval)
            },
            stopAutoplay: function () {
                this.isAutoPlaying = !1, window.clearTimeout(this.autoTimeOut)
            },
            setupSlider: function (e) {
                this.slideIndex = e, this.indicators.length && this._setActiveIndicator(e), this._setupActiveSlide(e)
            },
            destroy: function () {
                this.container.querySelector(".carousel-slider-wrapper").classList.remove("slick-initialized"), this.container.querySelector(".carousel-slider").removeAttribute("style"), this.container.querySelectorAll(".carousel-slide").forEach(function (e) {
                    e.removeAttribute("style")
                }), this.adaptHeight && window.removeEventListener("resize", this.eventHandlers.debounceResize), this.container.removeEventListener("focus", this.eventHandlers.focus, !0), this.slider.removeEventListener("focusin", this.eventHandlers.focusIn, !0), this.slider.removeEventListener("focusout", this.eventHandlers.focusOut, !0), this.container.removeEventListener("blur", this.eventHandlers.blur, !0), this.buttons && this.buttons.forEach(function (e) {
                    e.removeEventListener("click", this.eventHandlers.clickButton)
                }.bind(this)), this.indicators.forEach(function (e) {
                    e.childNodes.forEach(function (e) {
                        e.firstElementChild.removeEventListener("click", this.eventHandlers.onClickIndicator), e.firstElementChild.removeEventListener("keydown", this.eventHandlers.onKeydownIndicator)
                    }, this)
                }, this), "slide" === this.options.type && (window.removeEventListener("resize", this.eventHandlers.debounceResizeSlideIn), this.touchEvents && this.options.canUseTouchEvents && (this.touchEvents.destroy(), this.touchEvents = null))
            },
            _setupEventHandlers: function () {
                this.eventHandlers.focus = this._onFocus.bind(this), this.eventHandlers.focusIn = this._onFocusIn.bind(this), this.eventHandlers.focusOut = this._onFocusOut.bind(this), this.eventHandlers.blur = this._onBlur.bind(this), this.eventHandlers.keyUp = this._onKeyUp.bind(this), this.eventHandlers.clickButton = this._onClickButton.bind(this), this.eventHandlers.onClickIndicator = this._onClickIndicator.bind(this), this.eventHandlers.onKeydownIndicator = this._onKeydownIndicator.bind(this), this.eventHandlers.onClickPause = this._onClickPause.bind(this), this.adaptHeight && (this.eventHandlers.debounceResize = theme.Helpers.debounce(function () {
                    this.setSlideshowHeight()
                }.bind(this), 50), window.addEventListener("resize", this.eventHandlers.debounceResize)), this.container.addEventListener("focus", this.eventHandlers.focus, !0), this.slider.addEventListener("focusin", this.eventHandlers.focusIn, !0), this.slider.addEventListener("focusout", this.eventHandlers.focusOut, !0), this.container.addEventListener("blur", this.eventHandlers.blur, !0), this.buttons && this.buttons.forEach(function (e) {
                    e.addEventListener("click", this.eventHandlers.clickButton)
                }.bind(this)), this.pause && this.pause.addEventListener("click", this.eventHandlers.onClickPause), this.indicators.forEach(function (e) {
                    e.childNodes.forEach(function (e) {
                        e.firstElementChild.addEventListener("click", this.eventHandlers.onClickIndicator), e.firstElementChild.addEventListener("keydown", this.eventHandlers.onKeydownIndicator)
                    }, this)
                }, this), "slide" === this.options.type && (this.eventHandlers.debounceResizeSlideIn = theme.Helpers.debounce(function () {
                    this.sliderItemWidthTotal = 0, this._setupSlideType(!0)
                }.bind(this), 50), window.addEventListener("resize", this.eventHandlers.debounceResizeSlideIn), this.options.canUseTouchEvents && this.options.slidesToScroll < this.slides.length && this._setupTouchEvents())
            },
            _setupTouchEvents: function () {
                this.touchEvents = new theme.TouchEvents(this.sliderTrack, {
                    start: function () {
                        this._onTouchStart()
                    }.bind(this),
                    move: function (e, t, i) {
                        this._onTouchMove(e, t, i)
                    }.bind(this),
                    end: function (e, t, i) {
                        this._onTouchEnd(e, t, i)
                    }.bind(this)
                })
            },
            _setupSlideType: function (e) {
                this.sliderItemWidth = Math.floor(this.sliderContainer.offsetWidth / this.options.slidesToShow), this.sliderTranslateXMove = this.sliderItemWidth * this.options.slidesToScroll, e || this.sliderContainer.classList.add(i.sliderInitialized), this.slides.forEach(function (e, i) {
                    var s = e.querySelector(t.sliderItemLink);
                    e.style.width = this.sliderItemWidth + "px", e.setAttribute("aria-hidden", !0), e.setAttribute("tabindex", -1), this.sliderItemWidthTotal = this.sliderItemWidthTotal + e.offsetWidth, s && s.setAttribute("tabindex", -1), i < this.options.slidesToShow && (e.setAttribute("aria-hidden", !1), e.classList.add(this.options.slideActiveClass), s && s.setAttribute("tabindex", 0))
                }, this), this.sliderTrack.style.width = Math.floor(this.sliderItemWidthTotal) + "px", this.sliderTrack.style.transform = "translateX(-0px)", this.buttons.length && (this.buttons[0].setAttribute("aria-disabled", !0), this.buttons[1].removeAttribute("aria-disabled")), this.indicators.length && this._setActiveIndicator(0)
            },
            _onTouchStart: function () {
                this.touchStartPosition = this._getTranslateXPosition()
            },
            _onTouchMove: function (e, t, i) {
                var s = 80;
                Shopify.designMode && (e.clientX <= s || e.clientX >= window.innerWidth - s) ? e.target.dispatchEvent(new MouseEvent("mouseup", {
                    bubbles: !0,
                    cancelable: !0
                })) : "left" !== t && "right" !== t || (this.touchMovePosition = this.touchStartPosition + i.xPosition, this.sliderTrack.style.transform = "translateX(" + this.touchMovePosition + "px")
            },
            _onTouchEnd: function (e, t, i) {
                var s = 0;
                if (0 !== Object.keys(i).length) {
                    var n = "left" === t ? "next" : "";
                    "left" === t ? s = this._isNextTranslateXLast(this.touchStartPosition) ? this.touchStartPosition : this.touchStartPosition - this.sliderTranslateXMove : (s = this.touchStartPosition + this.sliderTranslateXMove, this._isNextTranslateXFirst(this.touchStartPosition) && (s = 0)), this.slideIndex = this._getNextSlideIndex(n), this.sliderTrack.style.transition = "transform 500ms ease 0s", this.sliderTrack.style.transform = "translateX(" + s + "px", window.setTimeout(function () {
                        this.sliderTrack.style.transition = ""
                    }.bind(this), 500), this._verifyFirstLastSlideTranslateX(s), this._postTransitionEnd()
                }
            },
            _onClickButton: function (e) {
                if (!(e.detail > 1)) {
                    var t = e.currentTarget,
                        i = t.hasAttribute(s.buttonNext);
                    "slide" === this.options.type && "true" === t.getAttribute("aria-disabled") || (this.options.autoplay && this.isAutoPlaying && this.stopAutoplay(), i ? this.nextSlide() : this.previousSlide())
                }
            },
            _onClickIndicator: function (e) {
                e.preventDefault(), e.target.classList.contains(i.indicatorActive) || (this.options.autoplay && this.isAutoPlaying && this.stopAutoplay(), this.slideIndex = Number(e.target.dataset.slideNumber), this.goToSlideByIndex(this.slideIndex))
            },
            goToSlideByIndex: function (e) {
                if (this._setPosition(e), "slide" === this.options.type && this.sliderTrack) {
                    this.sliderTrack.style.transition = "transform 500ms ease 0s";
                    var t = e * this.slides[0].offsetWidth;
                    this.sliderTrack.style.transform = "translateX(-" + t + "px)", this.options.slidesToShow > 1 && (this._verifyFirstLastSlideTranslateX(t), this.buttons.length && this._disableArrows(), this._setupMultipleActiveSlide(e, e + (this.options.slidesToShow - 1)))
                }
            },
            _onKeydownIndicator: function (e) {
                e.keyCode === slate.utils.keyboardKeys.ENTER && (this._onClickIndicator(e), this.slider.focus())
            },
            _onClickPause: function (e) {
                e.currentTarget.classList.contains(i.isPaused) ? (e.currentTarget.classList.remove(i.isPaused), this.startAutoplay()) : (e.currentTarget.classList.add(i.isPaused), this.stopAutoplay())
            },
            _onFocus: function () {
                this.container.addEventListener("keyup", this.eventHandlers.keyUp)
            },
            _onFocusIn: function () {
                this.slider.hasAttribute("aria-live") || (this.options.autoplay && this.isAutoPlaying && this.stopAutoplay(), this.slider.setAttribute("aria-live", "polite"))
            },
            _onBlur: function () {
                this.container.removeEventListener("keyup", this.eventHandlers.keyUp)
            },
            _onFocusOut: function () {
                this.slider.removeAttribute("aria-live"), setTimeout(function () {
                    document.activeElement.closest("#" + this.slider.getAttribute("id")) || !this.options.autoplay || this.isAutoPlaying || this.pause.classList.contains(i.isPaused) || this.startAutoplay()
                }.bind(this), this.timeout)
            },
            _onKeyUp: function (e) {
                switch (e.keyCode) {
                    case slate.utils.keyboardKeys.LEFTARROW:
                        if (!this.options.canUseKeyboardArrows) return;
                        if ("slide" === this.options.type && this.isFirstSlide) return;
                        this.previousSlide();
                        break;
                    case slate.utils.keyboardKeys.RIGHTARROW:
                        if (!this.options.canUseKeyboardArrows) return;
                        if ("slide" === this.options.type && this.isLastSlide) return;
                        this.nextSlide();
                        break;
                    case slate.utils.keyboardKeys.ESCAPE:
                        this.slider.blur()
                }
            },
            _move: function (e) {
                if ("slide" === this.options.type) this.slideIndex = this._getNextSlideIndex(e), this._moveSlideshow(e);
                else {
                    var t = this._getNextSlideIndex(e);
                    this._setPosition(t)
                }
            },
            _moveSlideshow: function (e) {
                this.direction = e;
                var t = 0,
                    i = this._getTranslateXPosition(),
                    s = this._getActiveSlidesIndex(),
                    n = Math.min.apply(Math, s),
                    r = Math.max.apply(Math, s);
                this.nextMinIndex = "next" === e ? n + this.options.slidesToShow : n - this.options.slidesToShow, this.nextMaxIndex = "next" === e ? r + this.options.slidesToShow : n - 1, this.sliderTrack.style.transition = "transform 500ms ease 0s", "next" === e ? (t = i - this.sliderTranslateXMove, this.sliderTrack.style.transform = "translateX(" + t + "px)") : (t = i + this.sliderTranslateXMove, this.sliderTrack.style.transform = "translateX(" + t + "px)"), this._verifyFirstLastSlideTranslateX(t), this._postTransitionEnd(), this._setupMultipleActiveSlide(this.nextMinIndex, this.nextMaxIndex)
            },
            _setPosition: function (e) {
                this.slideIndex = e, this.indicators.length && this._setActiveIndicator(e), this._setupActiveSlide(e), this.options.autoplay && this.isAutoPlaying && this.startAutoplay(), this.container.dispatchEvent(new CustomEvent("slider_slide_changed", {
                    detail: e
                }))
            },
            _setupActiveSlide: function (e) {
                this.slides.forEach(function (e) {
                    e.setAttribute("aria-hidden", !0), e.classList.remove(this.options.slideActiveClass)
                }, this), this.slides[e].setAttribute("aria-hidden", !1), this.slides[e].classList.add(this.options.slideActiveClass)
            },
            _setupMultipleActiveSlide: function (e, i) {
                this.slides.forEach(function (s) {
                    var n = Number(s.getAttribute("data-slider-slide-index")),
                        r = s.querySelector(t.sliderItemLink);
                    s.setAttribute("aria-hidden", !0), s.classList.remove(this.options.slideActiveClass), r && r.setAttribute("tabindex", -1), n >= e && n <= i && (s.setAttribute("aria-hidden", !1), s.classList.add(this.options.slideActiveClass), r && r.setAttribute("tabindex", 0))
                }, this)
            },
            _setActiveIndicator: function (e) {
                this.indicators.forEach(function (t) {
                    var s = t.querySelector("." + i.indicatorActive),
                        n = t.childNodes[e];
                    s && (s.setAttribute("aria-selected", !1), s.classList.remove(i.indicatorActive), s.firstElementChild.removeAttribute("aria-current")), n.classList.add(i.indicatorActive), n.setAttribute("aria-selected", !0), n.firstElementChild.setAttribute("aria-current", !0)
                }, this)
            },
            setSlideshowHeight: function () {
                var e = this.sliderContainer.getAttribute("data-min-aspect-ratio");
                this.sliderContainer.style.height = document.documentElement.offsetWidth / e + "px"
            },
            _getNextSlideIndex: function (e) {
                var t = "next" === e ? 1 : -1;
                if ("next" === e) {
                    if (this.slideIndex === this.lastSlide) return "slide" === this.options.type ? this.lastSlide : 0
                } else if (!this.slideIndex) return "slide" === this.options.type ? 0 : this.lastSlide;
                return this.slideIndex + t
            },
            _getActiveSlidesIndex: function () {
                var e = this.slides.filter(function (e) {
                    if (e.classList.contains(this.options.slideActiveClass)) return e
                }, this),
                    t = e.map(function (e) {
                        return Number(e.getAttribute("data-slider-slide-index"))
                    });
                return t
            },
            _disableArrows: function () {
                if (0 !== this.buttons.length) {
                    var e = this.buttons[0],
                        t = this.buttons[1];
                    this.isFirstSlide ? e.setAttribute("aria-disabled", !0) : e.removeAttribute("aria-disabled"), this.isLastSlide ? t.setAttribute("aria-disabled", !0) : t.removeAttribute("aria-disabled")
                }
            },
            _verifyFirstLastSlideTranslateX: function (e) {
                this._isNextTranslateXFirst(e) ? this.isFirstSlide = !0 : this.isFirstSlide = !1, this._isNextTranslateXLast(e) ? this.isLastSlide = !0 : this.isLastSlide = !1
            },
            _getTranslateXPosition: function () {
                return Number(this.sliderTrack.style.transform.match(/(-?[0-9]+)/g)[0])
            },
            _isNextTranslateXFirst: function (e) {
                return 0 === e
            },
            _isNextTranslateXLast: function (e) {
                var t = Math.abs(e);
                return (this.sliderItemWidthTotal - t) / this.sliderItemWidth == this.options.slidesToShow
            },
            _postTransitionEnd: function () {
                this.buttons.length && this._disableArrows(), this.indicators.length && this._setActiveIndicator(this.slideIndex)
            }
        }), e
    }(), theme.Video = function () {
        function e(e) {
            if (e) {
                if (q[e.id] = {
                    id: e.id,
                    videoId: e.dataset.id,
                    type: e.dataset.type,
                    status: "image_with_play" === e.dataset.type ? "closed" : "background",
                    video: e,
                    videoWrapper: e.closest(M.videoWrapper),
                    section: e.closest(M.section),
                    controls: "background" === e.dataset.type ? 0 : 1
                }, !P) {
                    var t = document.createElement("script");
                    t.src = "https://www.youtube.com/iframe_api";
                    var i = document.getElementsByTagName("script")[0];
                    i.parentNode.insertBefore(t, i)
                }
                a()
            }
        }

        function t(e) {
            (k || I) && e && "function" == typeof H[e].playVideo && r(e)
        }

        function i(e) {
            H[e] && "function" == typeof H[e].pauseVideo && H[e].pauseVideo()
        }

        function s() {
            for (var e in q) q.hasOwnProperty(e) && E(e);
            L(), P = !0
        }

        function n(e) {
            P && (E(e), L())
        }

        function r(e, t) {
            var i = q[e],
                s = H[e],
                n = i.videoWrapper;
            if (I) u(i);
            else {
                if (t || T) return n.classList.remove(O.loading), u(i), void s.playVideo();
                s.playVideo()
            }
        }

        function o(e) {
            var t = e ? O.supportsAutoplay : O.supportsNoAutoplay;
            document.documentElement.classList.remove(O.supportsAutoplay, O.supportsNoAutoplay), document.documentElement.classList.add(t), e || (I = !0), T = !0
        }

        function a() {
            k || (w() && (I = !0), I && o(!1), k = !0)
        }

        function c(e) {
            e.target.setPlaybackQuality("hd1080");
            var t = m(e),
                i = e.target.getVideoData().title;
            a(), document.getElementById(t.id).setAttribute("tabindex", "-1"), g(), C(t.videoWrapper, i), "background" === t.type && (e.target.mute(), r(t.id)), t.videoWrapper.classList.add(O.loaded)
        }

        function l(e) {
            var t = m(e);
            switch ("background" !== t.status || w() || T || e.data !== YT.PlayerState.PLAYING && e.data !== YT.PlayerState.BUFFERING || (o(!0), T = !0, t.videoWrapper.classList.remove(O.loading)), e.data) {
                case YT.PlayerState.ENDED:
                    d(t);
                    break;
                case YT.PlayerState.PAUSED:
                    setTimeout(function () {
                        e.target.getPlayerState() === YT.PlayerState.PAUSED && h(t)
                    }, 200)
            }
        }

        function d(e) {
            switch (e.type) {
                case "background":
                    H[e.id].seekTo(0);
                    break;
                case "image_with_play":
                    p(e.id), v(e.id, !1)
            }
        }

        function u(e) {
            var t = e.videoWrapper,
                i = t.querySelector(M.pauseVideoBtn);
            t.classList.remove(O.loading), i.classList.contains(O.userPaused) && i.classList.remove(O.userPaused), "background" !== e.status && (document.getElementById(e.id).setAttribute("tabindex", "0"), "image_with_play" === e.type && (t.classList.remove(O.paused), t.classList.add(O.playing)), setTimeout(function () {
                t.querySelector(M.closeVideoBtn).focus()
            }, x.scrollAnimationDuration))
        }

        function h(e) {
            var t = e.videoWrapper;
            "image_with_play" === e.type && ("closed" === e.status ? t.classList.remove(O.paused) : t.classList.add(O.paused)), t.classList.remove(O.playing)
        }

        function p(e) {
            var t = q[e],
                i = t.videoWrapper;
            switch (document.getElementById(t.id).setAttribute("tabindex", "-1"), t.status = "closed", t.type) {
                case "image_with_play":
                    H[e].stopVideo(), h(t);
                    break;
                case "background":
                    H[e].mute(), _(e)
            }
            i.classList.remove(O.paused, O.playing)
        }

        function m(e) {
            var t = e.target.getIframe().id;
            return q[t]
        }

        function v(e, t) {
            var i = q[e],
                s = i.videoWrapper.getBoundingClientRect().top + window.pageYOffset,
                n = i.videoWrapper.querySelector(M.playVideoBtn),
                r = 0,
                o = 0;
            if (w() && i.videoWrapper.parentElement.classList.toggle("page-width", !t), t) {
                if (o = w() ? window.innerWidth / x.ratio : i.videoWrapper.offsetWidth / x.ratio, r = (window.innerHeight - o) / 2, i.videoWrapper.style.height = i.videoWrapper.getBoundingClientRect().height + "px", i.videoWrapper.classList.remove(O.wrapperMinHeight), i.videoWrapper.style.height = o + "px", !w() || !Shopify.designMode) {
                    var a = document.documentElement.style.scrollBehavior;
                    document.documentElement.style.scrollBehavior = "smooth", window.scrollTo({
                        top: s - r
                    }), document.documentElement.style.scrollBehavior = a
                }
            } else {
                o = w() ? i.videoWrapper.dataset.mobileHeight : i.videoWrapper.dataset.desktopHeight, i.videoWrapper.style.height = o + "px", setTimeout(function () {
                    i.videoWrapper.classList.add(O.wrapperMinHeight)
                }, 600);
                var c = window.scrollX,
                    l = window.scrollY;
                n.focus(), window.scrollTo(c, l)
            }
        }

        function f(e) {
            var s = q[e].videoWrapper.querySelector(M.pauseVideoBtn),
                n = s.classList.contains(O.userPaused);
            n ? (s.classList.remove(O.userPaused), t(e)) : (s.classList.add(O.userPaused), i(e)), s.setAttribute("aria-pressed", !n)
        }

        function y(e) {
            var t = q[e];
            switch (t.videoWrapper.classList.add(O.loading), t.videoWrapper.style.height = t.videoWrapper.offsetHeight + "px", t.status = "open", t.type) {
                case "image_with_play":
                    r(e, !0);
                    break;
                case "background":
                    S(e, t), H[e].unMute(), r(e, !0)
            }
            v(e, !0), document.addEventListener("keydown", D)
        }

        function g() {
            var e = document.querySelectorAll("." + O.backgroundVideo);
            e.forEach(function (e) {
                b(e)
            })
        }

        function b(e) {
            if (P)
                if (w()) e.style.cssText = null;
                else {
                    var t = e.closest(M.videoWrapper),
                        i = t.clientWidth,
                        s = e.clientWidth,
                        n = t.dataset.desktopHeight;
                    if (i / x.ratio < n) {
                        s = Math.ceil(n * x.ratio);
                        var r = "width: " + s + "px; height: " + n + "px; left: " + (i - s) / 2 + "px; top: 0;";
                        e.style.cssText = r
                    } else {
                        n = Math.ceil(i / x.ratio);
                        var o = "width: " + i + "px; height: " + n + "px; top: " + (n - n) / 2 + "px; left: 0;";
                        e.style.cssText = o
                    }
                    theme.Helpers.prepareTransition(e), t.classList.add(O.loaded)
                }
        }

        function S(e) {
            var t = document.getElementById(e);
            t.classList.remove(O.backgroundVideo), t.classList.add(O.videoWithImage), setTimeout(function () {
                document.getElementById(e).style.cssText = null
            }, 600), q[e].videoWrapper.classList.remove(O.backgroundVideoWrapper), q[e].videoWrapper.classList.add(O.playing), q[e].status = "open"
        }

        function _(e) {
            var t = document.getElementById(e);
            t.classList.remove(O.videoWithImage), t.classList.add(O.backgroundVideo), q[e].videoWrapper.classList.add(O.backgroundVideoWrapper), q[e].status = "background", b(t)
        }

        function w() {
            return window.innerWidth < theme.breakpoints.medium
        }

        function L() {
            var e = document.querySelectorAll(M.playVideoBtn),
                t = document.querySelectorAll(M.closeVideoBtn),
                i = document.querySelectorAll(M.pauseVideoBtn);
            e.forEach(function (e) {
                e.addEventListener("click", function (e) {
                    var t = e.currentTarget.dataset.controls;
                    y(t)
                })
            }), t.forEach(function (e) {
                e.addEventListener("click", function (e) {
                    var t = e.currentTarget.dataset.controls;
                    e.currentTarget.blur(), p(t), v(t, !1)
                })
            }), i.forEach(function (e) {
                e.addEventListener("click", function (e) {
                    var t = e.currentTarget.dataset.controls;
                    f(t)
                })
            }), window.addEventListener("resize", B), window.addEventListener("scroll", N)
        }

        function E(e) {
            var t = Object.assign(x, q[e]);
            t.playerVars.controls = t.controls, H[e] = new YT.Player(e, t)
        }

        function A() {
            document.removeEventListener("keydown", D), window.removeEventListener("resize", B), window.removeEventListener("scroll", N)
        }

        function C(e, t) {
            var i = e.querySelectorAll(M.playVideoBtn),
                s = e.querySelector(M.closeVideoBtn),
                n = e.querySelector(M.pauseVideoBtn),
                r = s.querySelector(M.fallbackText),
                o = n.querySelector(M.pauseVideoStop),
                a = o.querySelector(M.fallbackText),
                c = n.querySelector(M.pauseVideoResume),
                l = c.querySelector(M.fallbackText);
            i.forEach(function (e) {
                var i = e.querySelector(M.fallbackText);
                i.textContent = i.textContent.replace("[video_title]", t)
            }), r.textContent = r.textContent.replace("[video_title]", t), a.textContent = a.textContent.replace("[video_title]", t), l.textContent = l.textContent.replace("[video_title]", t)
        }
        var T = !1,
            k = !1,
            I = !1,
            P = !1,
            q = {},
            H = [],
            x = {
                ratio: 16 / 9,
                scrollAnimationDuration: 400,
                playerVars: {
                    iv_load_policy: 3,
                    modestbranding: 1,
                    autoplay: 0,
                    controls: 0,
                    wmode: "opaque",
                    branding: 0,
                    autohide: 0,
                    rel: 0
                },
                events: {
                    onReady: c,
                    onStateChange: l
                }
            },
            O = {
                playing: "video-is-playing",
                paused: "video-is-paused",
                loading: "video-is-loading",
                loaded: "video-is-loaded",
                backgroundVideoWrapper: "video-background-wrapper",
                videoWithImage: "video--image_with_play",
                backgroundVideo: "video--background",
                userPaused: "is-paused",
                supportsAutoplay: "autoplay",
                supportsNoAutoplay: "no-autoplay",
                wrapperMinHeight: "video-section-wrapper--min-height"
            },
            M = {
                section: ".video-section",
                videoWrapper: ".video-section-wrapper",
                playVideoBtn: ".video-control__play",
                closeVideoBtn: ".video-control__close-wrapper",
                pauseVideoBtn: ".video__pause",
                pauseVideoStop: ".video__pause-stop",
                pauseVideoResume: ".video__pause-resume",
                fallbackText: ".icon__fallback-text"
            },
            D = function (e) {
                var t = document.activeElement.dataset.controls;
                e.keyCode === slate.utils.keyboardKeys.ESCAPE && t && (p(t), v(t, !1))
            },
            B = theme.Helpers.debounce(function () {
                if (P) {
                    var e, t = window.innerHeight === screen.height;
                    if (g(), w()) {
                        for (e in q) q.hasOwnProperty(e) && (q[e].videoWrapper.classList.contains(O.playing) && (t || (i(e), h(q[e]))), q[e].videoWrapper.style.height = document.documentElement.clientWidth / x.ratio + "px");
                        o(!1)
                    } else
                        for (e in o(!0), q) {
                            var s = q[e].videoWrapper.querySelectorAll("." + O.videoWithImage);
                            s.length || (H[e].playVideo(), u(q[e]))
                        }
                }
            }, 200),
            N = theme.Helpers.debounce(function () {
                if (P)
                    for (var e in q)
                        if (q.hasOwnProperty(e)) {
                            var t = q[e].videoWrapper,
                                i = t.getBoundingClientRect().top + window.pageYOffset + .75 * t.offsetHeight < window.pageYOffset || t.getBoundingClientRect().top + window.pageYOffset + .25 * t.offsetHeight > window.pageYOffset + window.innerHeight;
                            if (t.classList.contains(O.playing)) {
                                if (!i) return;
                                p(e), v(e, !1)
                            }
                        }
            }, 50);
        return {
            init: e,
            editorLoadVideo: n,
            loadVideos: s,
            playVideo: t,
            pauseVideo: i,
            removeEvents: A
        }
    }(), theme.ProductVideo = function () {
        function e(e, n) {
            if (e) {
                var r = e.querySelector("iframe, video");
                if (r) {
                    var o = e.getAttribute("data-media-id");
                    a[o] = {
                        mediaId: o,
                        sectionId: n,
                        host: s(r),
                        container: e,
                        element: r,
                        ready: function () {
                            i(this)
                        }
                    }, window.Shopify.loadFeatures([{
                        name: "video-ui",
                        version: "2.0",
                        onLoad: t
                    }]), theme.LibraryLoader.load("plyrShopifyStyles")
                }
            }
        }

        function t(e) {
            e ? r() : n()
        }

        function i(e) {
            if (!e.player) {
                var t = e.container.closest(l.productMediaWrapper),
                    i = "true" === t.getAttribute("data-" + d.enableVideoLooping);
                e.player = new Shopify.Video(e.element, {
                    loop: {
                        active: i
                    }
                });
                var s = function () {
                    e.player && e.player.pause()
                };
                t.addEventListener("mediaHidden", s), t.addEventListener("xrLaunch", s), t.addEventListener("mediaVisible", function () {
                    theme.Helpers.isTouch() || e.player && e.player.play()
                })
            }
        }

        function s(e) {
            return "VIDEO" === e.tagName ? c.shopify : c.external
        }

        function n() {
            for (var e in a)
                if (a.hasOwnProperty(e)) {
                    var t = a[e];
                    t.ready()
                }
        }

        function r() {
            for (var e in a)
                if (a.hasOwnProperty(e)) {
                    var t = a[e];
                    if (t.nativeVideo) continue;
                    t.host === c.shopify && (t.element.setAttribute("controls", "controls"), t.nativeVideo = !0)
                }
        }

        function o(e) {
            for (var t in a)
                if (a.hasOwnProperty(t)) {
                    var i = a[t];
                    i.sectionId === e && (i.player && i.player.destroy(), delete a[t])
                }
        }
        var a = {},
            c = {
                shopify: "shopify",
                external: "external"
            },
            l = {
                productMediaWrapper: "[data-product-single-media-wrapper]"
            },
            d = {
                enableVideoLooping: "enable-video-looping",
                videoId: "video-id"
            };
        return {
            init: e,
            hosts: c,
            loadVideos: n,
            removeSectionVideos: o
        }
    }(), theme.ProductModel = function () {
        function e(e, s) {
            r[s] = {
                loaded: !1
            }, e.forEach(function (e, t) {
                var i = e.getAttribute("data-media-id"),
                    n = e.querySelector("model-viewer"),
                    r = n.getAttribute("data-model-id");
                if (0 === t) {
                    var l = e.closest(c.mediaGroup),
                        d = l.querySelector(c.xrButton);
                    a[s] = {
                        element: d,
                        defaultId: r
                    }
                }
                o[i] = {
                    modelId: r,
                    sectionId: s,
                    container: e,
                    element: n
                }
            }), window.Shopify.loadFeatures([{
                name: "shopify-xr",
                version: "1.0",
                onLoad: t
            }, {
                name: "model-viewer-ui",
                version: "1.0",
                onLoad: i
            }]), theme.LibraryLoader.load("modelViewerUiStyles")
        }

        function t(e) {
            if (!e)
                if (window.ShopifyXR) {
                    for (var i in r)
                        if (r.hasOwnProperty(i)) {
                            var s = r[i];
                            if (s.loaded) continue;
                            var n = document.querySelector("#ModelJson-" + i);
                            window.ShopifyXR.addModels(JSON.parse(n.innerHTML)), s.loaded = !0
                        } window.ShopifyXR.setupXRElements()
                } else document.addEventListener("shopify_xr_initialized", function () {
                    t()
                })
        }

        function i(e) {
            if (!e)
                for (var t in o)
                    if (o.hasOwnProperty(t)) {
                        var i = o[t];
                        i.modelViewerUi || (i.modelViewerUi = new Shopify.ModelViewerUI(i.element)), s(i)
                    }
        }

        function s(e) {
            var t = a[e.sectionId];
            e.container.addEventListener("mediaVisible", function () {
                t.element.setAttribute("data-shopify-model3d-id", e.modelId), theme.Helpers.isTouch() || e.modelViewerUi.play()
            }), e.container.addEventListener("mediaHidden", function () {
                t.element.setAttribute("data-shopify-model3d-id", t.defaultId), e.modelViewerUi.pause()
            }), e.container.addEventListener("xrLaunch", function () {
                e.modelViewerUi.pause()
            })
        }

        function n(e) {
            for (var t in o)
                if (o.hasOwnProperty(t)) {
                    var i = o[t];
                    i.sectionId === e && (o[t].modelViewerUi.destroy(), delete o[t])
                } delete r[e]
        }
        var r = {},
            o = {},
            a = {},
            c = {
                mediaGroup: "[data-product-single-media-group]",
                xrButton: "[data-shopify-xr]"
            };
        return {
            init: e,
            removeSectionModels: n
        }
    }(), window.theme = window.theme || {}, theme.FormStatus = function () {
        function e() {
            var e = document.querySelectorAll(t.statusMessage);
            e.forEach(function (e) {
                e.setAttribute("tabindex", -1), e.focus(), e.addEventListener("blur", function (e) {
                    e.target.removeAttribute("tabindex")
                }, {
                    once: !0
                })
            })
        }
        var t = {
            statusMessage: "[data-form-status]"
        };
        return {
            init: e
        }
    }(), theme.Hero = function () {
        function e(e, s) {
            function n() {
                var e, t;
                c && (e = c.offsetHeight + 50), l && (t = l.offsetHeight), e > t && (l.style.minHeight = e + "px")
            }
            var r = document.querySelector(e),
                o = r.getAttribute("data-layout"),
                a = document.querySelector("#shopify-section-" + s),
                c = a.querySelector(i.heroFixedWidthContent),
                l = a.querySelector(i.heroFixedWidthImage);
            "fixed_width" === o && (a.classList.remove(t.indexSectionFlush), n(), window.addEventListener("resize", function () {
                theme.Helpers.debounce(function () {
                    n()
                }, 50)
            }))
        }
        var t = {
            indexSectionFlush: "index-section--flush"
        },
            i = {
                heroFixedWidthContent: ".hero-fixed-width__content",
                heroFixedWidthImage: ".hero-fixed-width__image"
            };
        return e
    }(), theme.Cart = function () {
        function e() {
            t(), i(), n(), s(), r(), o(), v(), a(), S.initialLoad && (d(S.deliveryDate, S.festiveDaysSettings), S.initialLoad = !1), g()
        }

        function t() {
            _ = {
                mainContent: document.querySelector(b.mainContent),
                form: document.querySelector(b.form),
                calendar: document.querySelector(b.calendar),
                calendarSettings: document.querySelector(b.calenderSettings),
                quantitySelectors: document.querySelectorAll(b.quantitySelectors),
                quantityInputs: document.querySelectorAll(b.quantityInputs),
                itemCount: document.querySelector(b.itemCount),
                cartCountBubble: document.querySelector(b.cartCountBubble),
                countdown: document.querySelector(b.countdown),
                toggleNotes: document.querySelectorAll(b.toggleNote),
                cartNotes: document.querySelectorAll(b.cartNote),
                checkout: document.querySelector(b.checkout),
                checkoutStarted: document.querySelector(b.checkoutStarted),
                drawers: document.querySelectorAll(b.drawers),
                ageCheck: document.querySelector(b.ageCheck),
                chooseDeliveryDate: document.querySelector(b.chooseDeliveryDate),
                confirmDelivery: document.querySelector(b.confirmDelivery),
                deliveryOrderTerms: document.querySelector(b.deliveryOrderTerms),
                deliveryOrderTermsDrawer: document.querySelector(b.deliveryOrderTermsDrawer),
                confirmDeliveryCheckbox: document.querySelector(b.confirmDeliveryCheckbox)
            }
        }

        function i() {
            _.quantityInputs.forEach(function (e) {
                e.addEventListener("change", f)
            }, this), _.toggleNotes.forEach(function (e) {
                e.addEventListener("click", c)
            }, this), _.cartNotes.forEach(function (e) {
                e.addEventListener("focusout", f)
            }, this), _.checkout.addEventListener("click", h), _.confirmDelivery.addEventListener("click", p), _.confirmDeliveryCheckbox.addEventListener("change", m), _.chooseDeliveryDate.addEventListener('click', chooseDeliveryDate);
        }

        function s() {
            _.quantitySelectors.forEach(function (e) {
                new theme.QtySelector(e)
            })
        }

        function n() {
            _.countdown && new theme.Countdown(_.countdown)
        }

        function chooseDeliveryDate(evt) {

            evt.preventDefault();

            let _cal = document.querySelector('#delivery-date');

            _cal.click();

        }

        function r() {
            var e = JSON.parse(_.calendarSettings.innerHTML);
            let t = [];
            e.festiveDays && e.festiveDays.length > 0 && e.festiveDays.map(e => {
                let i = e.dates.split(",");
                i = i.map(e => (t.push(e.trim()), e.trim())), e.dates = i
            }), S.festiveDaysSettings = e.festiveDays || [], _.calendar = flatpickr(_.calendar, {
                showMonths: window.innerWidth >= 690 ? 2 : 1,
                dateFormat: "d/m/Y",
                minDate: e.minDate,
                maxDate: e.maxDate,
                locale: {
                    firstDayOfWeek: 1
                },
                onDayCreate: function (i, s, n, r) {
                    var o = dayjs(r.dateObj);
                    if (t && t.includes(o.format("DD/MM/YYYY"))) {
                        const t = e.festiveDays.find(e => e.dates.includes(o.format("DD/MM/YYYY")));
                        if (t.icon.default) {
                            const e = `<img class="icon" src="${t.icon.default}" alt="Festive icon for ${t.Date}" />`,
                                i = `<img class="icon icon--selected" src="${t.icon.selected.length > 0 ? t.icon.selected : t.icon.default}" alt="Festive icon for ${t.Date}" />`;
                            r.innerHTML = e + i + r.innerHTML
                        }
                    }
                },
                disable: [function (t) {
                    t = dayjs(t);
                    var i = e.excludedDays.map(Number),
                        s = e.excludedDates;
                    return !!i.includes(t.get("day")) || (!!s.includes(t.format("DD/MM/YYYY")) || void 0)
                }],
                onChange: function () {
                    10 == _.calendar._input.value.length && u()
                }
            })
        }

        function o() {
            Array.prototype.forEach.call(_.drawers, e => {
                e = new window.Drawer(e)
            })
        }

        function a() {
            _.cartCountBubble.textContent = _.itemCount.getAttribute(S.itemCountAttr)
        }

        function c() {
            var e = this.getAttribute("data-cart-note-toggle"),
                t = document.querySelector("[data-cart-note=" + e + "]");
            t.classList.contains("is-visible") ? (t.classList.remove("is-visible"), t.querySelector("textarea").value = "", f()) : t.classList.add("is-visible")
        }

        function l(e, t) {
            let i = {};
            JSON.parse(document.querySelector("[data-cart-json]").innerHTML).items.filter(e => "delivery-surcharge" == e.handle).map(e => {
                i[e.variant_id] = 0
            });
            var s = t.find(t => t.dates.includes(e));
            const n = s && s.surcharge ? s.surcharge.variant_id : 0;
            return t.map(e => {
                e.surcharge && (i[e.surcharge.variant_id] = 0)
            }), 0 !== n && (i[n] = 1), i
        }

        function d(e, t) {
            const i = l(e, t);
            fetch(window.Shopify.routes.root + "cart/update.js", {
                method: "POST",
                headers: {
                    "Content-Type": "applicationjson"
                },
                body: JSON.stringify({
                    updates: {
                        ...i
                    },
                    attributes: {
                        "Delivery Date": e
                    }
                })
            }).then(e => {
                e.ok && y()
            })
        }

        async function u() {
            dayjs.extend(window.dayjs_plugin_customParseFormat);
            var e = dayjs(document.querySelector(b.calendar).value, "DD/MM/YYYY"),
                t = JSON.parse(document.querySelector("[data-cart-json]").innerHTML),
                i = JSON.parse(document.querySelector("[data-delivery-variants]").innerHTML),
                s = parseInt(document.querySelector("[data-delivery-variants]").getAttribute("data-product-id")),
                n = {};

            // remove all items from cart with delivery product ID

            t.items.forEach(function (e) {
                if (e.product_id == s) return n[e.key] = 0, !1
            });
            const r = l(e.format("DD/MM/YYYY"), S.festiveDaysSettings);

            const surchargesToRemove = Object.fromEntries(Object.entries(r).map(([key, value]) => {
                const matchingSurchargeInCart = t.items.find(i => i.variant_id === key)
                if (!matchingSurchargeInCart) return [0];
                return [matchingSurchargeInCart.key, value];
            }).filter(([key]) => key));
            const surchargesToAdd = Object.fromEntries(Object.entries(r).filter(([key, value]) => key && value));

            const removeRes = await fetch("/cart/update.js", {
                method: "POST",
                headers: {
                    "Content-Type": "applicationjson"
                },
                body: JSON.stringify({
                    updates: {
                        ...n,
                        ...surchargesToRemove
                    },
                    attributes: {
                        "Delivery Date": e.format("DD/MM/YYYY")
                    }
                })
            })
            await removeRes.json();

            if (surchargesToAdd) {
                const surchargesRes = await fetch("/cart/update.js", {
                    method: "POST",
                    headers: {
                        "Content-Type": "applicationjson"
                    },
                    body: JSON.stringify({
                        updates: {
                            ...surchargesToAdd
                        },
                        attributes: {
                            "Delivery Date": e.format("DD/MM/YYYY")
                        }
                    })
                })
                await surchargesRes.json();
            }

            const addRes = await fetch("/cart/add.js", {
                method: "POST",
                headers: {
                    "Content-Type": "applicationjson"
                },
                body: JSON.stringify({
                    items: [{
                        id: e.get("day") === 0 ? i[0].id : i[e.get("day") - 1].id,
                        quantity: 1,
                        properties: {
                            "__Delivery Date": e.format("DD/MM/YYYY"),
                            "__Delivery Day": e.get("day").toString()
                        }
                    }]
                })
            })
            await addRes.json();
            S.deliveryDate = e.format("DD/MM/YYYY", y(S.deliveryDate));
        }

        //disable quantity buttons when checkout is clicked
        function toggleQuantityButtons(e, state) {
            _.quantitySelectors.forEach(function (e) {
                const removeLinkEl = e.closest('.cart__qty-wrapper').querySelector('a[data-cart-remove]');
                removeLinkEl.dataset.disabled = state;
                const selectorButtonEls = e.querySelectorAll('.qty-selector__button');
                selectorButtonEls.forEach(function (buttonEl) {
                    buttonEl.disabled = state;
                })
            })
        }

        function h(e) {
            getCart();

            toggleQuantityButtons(e, true);

            // set checkout start date
            _.checkoutStarted.value = new Date();

            if (document.querySelector('.cart-delivery__input').value) {
                if (document.querySelector('#confirmDelivery') && document.querySelector('[data-age-check]')) {
                    if (document.querySelector('#confirmDelivery').checked == true && document.querySelector('[data-age-check]').checked == true) {
                        console.log('both');
                    } else {
                        // if (_.enableSurcharge) {
                        //     e.stopImmediatePropagation();
                        //     new window.Drawer(
                        //         document.querySelector('[data-drawer="confirm-delivery-date"]')
                        //     ).open();
                        //     e.preventDefault();
                        //     // return false;
                        // }

                        if (_.ageCheck && !_.ageCheck.checked) {
                            e.stopImmediatePropagation();
                            new window.Drawer(
                                document.querySelector('[data-drawer="age-check"]')
                            ).open();
                            e.preventDefault();
                            toggleQuantityButtons(e, false);
                        }

                    }

                } else if (document.querySelector('#confirmDelivery')) {
                    if (document.querySelector('.notice').classList.contains('notice--error')) {
                        e.stopImmediatePropagation();
                        e.preventDefault();
                        toggleQuantityButtons(e, false);
                    } else {
                        if (_.enableSurcharge && document.querySelector('#confirmDelivery').checked == false) {
                            e.stopImmediatePropagation();
                            new window.Drawer(
                                document.querySelector('[data-drawer="confirm-delivery-date"]')
                            ).open();
                            e.preventDefault();
                            toggleQuantityButtons(e, false);
                        } else if (_.enableSurcharge == false) {
                            console.log('false?');
                        }
                    }
                }

                if (document.querySelector('.notice').classList.contains('notice--error')) {
                    console.log('has error');
                    e.stopPropagation();
                    e.stopImmediatePropagation();
                    e.preventDefault();
                    toggleQuantityButtons(e, false);
                    // return false;
                } else {
                    return _.ageCheck && !_.ageCheck.checked ? (e.stopImmediatePropagation(), new window.Drawer(document.querySelector('[data-drawer="age-check"]')).open(), e.preventDefault(), !1) : '';
                }

            } else {
                e.preventDefault();
                e.stopImmediatePropagation();
                toggleQuantityButtons(e, false);
                document.querySelector('.cart-delivery__error').classList.remove('hidden');
                document.querySelector('.cart-delivery__input').classList.add('error');
            }
        }

        function p(e) {

            let _confirmDeliveryCheckbox = document.querySelector('#confirmDelivery');
            let _confirmAgeCheckbox = document.querySelector('input[data-age-check]');

            console.log(_confirmDeliveryCheckbox.checked);

            if (_confirmDeliveryCheckbox.checked == true) {
                e.preventDefault(), _.mainContent.classList.add("is-loading"), _.checkoutStarted.value = new Date, fetch("/cart/update.js", {
                    method: "POST",
                    body: new FormData(_.form)
                }).then(function (e) {
                    document.querySelector('.delivery-confirmation__error').classList.add('hidden');
                    console.log(document.querySelector('[data-drawer="confirm-delivery-date"]'));
                    new window.Drawer(document.querySelector('[data-drawer="confirm-delivery-date"]')).close();

                    _.mainContent.classList.remove('is-loading');

                    if (_confirmAgeCheckbox) {
                        if (_confirmAgeCheckbox.checked == false) {
                            // new window.Drawer(document.querySelector('[data-drawer="age-check"]')).open();
                        }
                    }


                }).catch(e => {
                    console.error("Error:", e)
                })
            } else {
                e.preventDefault();
                e.stopImmediatePropagation();
                console.log('not checked');
                document.querySelector('.delivery-confirmation__error').classList.remove('hidden');
            }


        }

        function m(e) {
            e.target.checked ? document.querySelector('.delivery-confirmation__error').classList.add('hidden') : document.querySelector('.delivery-confirmation__error').classList.remove('hidden');
        }

        function v() {
            var e = new URLSearchParams(window.location.search);
            "stock" == e.get("reset") ? new window.Drawer(document.querySelector('[data-drawer="stock-issues"]')).open() : "timeout" == e && new window.Drawer(document.querySelector('[data-drawer="timeout"]')).open(), e.get("reset") && window.history.pushState({}, document.title, "/")
        }

        function f() {
            _.mainContent.classList.add("is-loading");
            const e = new FormData(_.form),
                t = (JSON.parse(_.calendarSettings.innerHTML), e.get("attributes[Delivery Date]"));
            S.deliveryDate = t, console.log(Object.fromEntries(e.entries())), fetch("/cart/update.js", {
                method: "POST",
                body: e
            }).then(e => {
                e.ok && y()
            }).catch(e => {
                console.error("Error:", e)
            })
        }

        function getCart() {
            fetch(`/cart?section_id=${document.querySelector(".cart-template").dataset.sectionId}`, {
                credentials: "same-origin",
                method: "GET",
                headers: {
                    'Content-Type': 'applicationjson',
                },
            })
                .then(t => t.json())
                .then(function (t) {

                    let _threshold = parseInt(document.querySelector('[data-cart-checkout]').dataset.threshold);
                    let _notice = document.querySelector('.notice');

                    if (t.total_price < _threshold) {
                        _notice.classList.add('notice--error');
                        _notice.classList.remove('notice--warning');
                    } else {
                        _notice.classList.remove('notice--error');
                        _notice.classList.add('notice--warning');
                    }



                    console.log(_threshold);
                    console.log(t.total_price);

                })
        }

        function y(date) {
            return _.mainContent.classList.add("is-loading"), fetch(`/cart?section_id=${document.querySelector(".cart-template").dataset.sectionId}`, {
                credentials: "same-origin",
                method: "GET"
            }).then(function (t) {
                t.text().then(function (t) {
                    _.mainContent.innerHTML = t, _.mainContent.classList.remove("is-loading"), g(), e()
                    if (date) {
                        //document.querySelector('[data-cart-calendar]').value = date;
                        document.querySelector('[data-cart-checkout]').removeAttribute('disabled');
                        document.querySelector('[data-cart-checkout]').value = document.querySelector('[data-cart-checkout]').dataset.checkouttext;
                    }
                    // test this here.
                    if (_.enableSurcharge && S.deliveryDate.trim().length != 0) {
                        // e.stopImmediatePropagation();
                        new window.Drawer(
                            document.querySelector('[data-drawer="confirm-delivery-date"]')
                        ).open();
                        // e.preventDefault();
                        // return false;
                    }
                    console.log(_.enableSurcharge);

                })
            })
        }

        function g() {
            const e = S.festiveDaysSettings.find(e => e.dates.includes(S.deliveryDate)),
                t = e ? e.delivery_terms : "";
            console.log('render terms');
            if (e) {
                _.enableSurcharge = true;
                const e = `<h4>${t.title}</h4>`,
                    i = `<div class="side-drawer__content">${t.content}</div>`;
                _.deliveryOrderTermsDrawer.classList.add("has-order-terms"), _.deliveryOrderTerms.innerHTML = e + i, _.confirmDeliveryCheckbox.checked = !1
            }
        }
        var b = {
            mainContent: "#MainContent",
            json: "[data-cart-json]",
            wrapper: "[data-cart-wrapper]",
            form: "[data-cart-form]",
            summary: "[data-cart-summary]",
            calendar: "[data-cart-calendar]",
            calenderSettings: "[data-calendar-settings]",
            note: "[data-cart-note]",
            checkout: "[data-cart-checkout]",
            itemCount: "[data-cart-items]",
            cartCountBubble: "[data-cart-count-bubble]",
            recommendations: ".cart-recommendations",
            quantitySelectors: "[data-qtyselector]",
            quantityInputs: "[data-qtyselector-qty]",
            toggleNote: "[data-cart-note-toggle]",
            cartNote: "[data-cart-note]",
            countdown: "[data-countdown]",
            checkoutStarted: "[data-checkout-started]",
            drawers: "[data-drawer]",
            ageCheck: "[data-age-check]",
            chooseDeliveryDate: '[data-choose-delivery-date]',
            confirmDelivery: "[data-checkout-confirm-delivery]",
            deliveryVariants: "[data-delivery-variants]",
            deliveryOrderTerms: "[data-delivery-order-terms]",
            deliveryOrderTermsDrawer: ".delivery-confirm__drawer",
            confirmDeliveryCheckbox: "#confirmDelivery"
        },
            S = {
                itemCountAttr: "data-cart-items",
                calendarSettings: "data-cart-calendar",
                festiveDaysSettings: [],
                deliveryDate: document.getElementById("delivery-date") ? document.getElementById("delivery-date").value : "",
                initialLoad: !0
            },
            _ = {};
        return {
            init: e,
            updateDeliveryVariant: u
        }
    }(), window.theme = window.theme || {}, theme.SearchResultsTemplate = function () {
        function e(e, i, s, r) {
            return ['<div class="predictive-search">', '<div class="predictive-search__results">', t(theme.strings.products, e, s, r), a(e, r), "</div>", '<div class="predictive-search__results">', t(theme.strings.articles, i, s, r), n(i, r), "</div>", "</div>"].join("")
        }

        function t(e, t, i, n) {
            return 0 === t.length ? ['<p class="predictive-search-results__empty">No ' + e.toLowerCase() + " found</p>"] : ['<div class="predictive-search-title">', '<h3 id="predictive-search" class="predictive-search-title__content">' + e + '<span class="predictive-search-title__results">' + t.length + " results</span>", "</h3>", s(n), '<span class="predictive-search-title__loading-spinner">' + (i ? '<span class= "icon-predictive-search-spinner" ></span >' : "") + "</span>", "</div>"].join("")
        }

        function i() {
            return ['<div class="predictive-search">', '<div class="predictive-search-loading">', '<span class="visually-hidden">' + theme.strings.loading + "</span>", '<span class="predictive-search-loading__icon">', '<span class="icon-predictive-search-spinner"></span>', "</span>", "</div>", "</div>"].join("")
        }

        function s(e) {
            return ['<button type="submit" class="predictive-search-title__view-all" tabindex="-1">', theme.strings.searchViewAll + "</button>"].join("")
        }

        function n(e, t) {
            var i = e.length;
            return ['<ul id="predictive-search-results" class="predictive-search__list" role="listbox" aria-labelledby="predictive-search">', e.map(function (e, t) {
                return r(f(e), t, i)
            }).join(""), "</ul>"].join("")
        }

        function r(e, t, i) {
            return ['<li id="search-result-' + t + '" class="predictive-search-item" role="option" data-search-result>', '<a class="predictive-search-item__link" href="' + e.url + '" tabindex="-1">', '<div class="predictive-search__column predictive-search__column--image" data-image-loading-animation>', o(e), "</div>", '<div class="predictive-search__column predictive-search__column--content ' + (w() ? "" : "predictive-search__column--center") + '">', '<span class="predictive-search-item__title">', '<span class="predictive-search-item__title-text">' + e.title + "</span>", "</span>" + (w() ? d(product) : ""), '<span class="visually-hidden">, </span>', '<span class="visually-hidden">' + L(t + 1, i) + "</span>", "</div>", "</a>", "</li>"].join("")
        }

        function o(e) {
            return null === e.featured_image ? "" : '<img class="predictive-search-item__image lazyload" src="' + e.featured_image.url + '" data-src="' + e.featured_image.url + '" data-image alt="' + e.featured_image.alt + '" />'
        }

        function a(e, t) {
            var i = e.length;
            return ['<ul id="predictive-search-results" class="predictive-search__list" role="listbox" aria-labelledby="predictive-search">', e.map(function (e, t) {
                return c(y(e), t, i)
            }).join(""), "</ul>"].join("")
        }

        function c(e, t, i) {
            return ['<li id="search-result-' + t + '" class="predictive-search-item" role="option" data-search-result>', '<a class="predictive-search-item__link" href="' + e.url + '" tabindex="-1">', '<div class="predictive-search__column predictive-search__column--image" data-image-loading-animation>', l(e), "</div>", '<div class="predictive-search__column predictive-search__column--content ' + (w() ? "" : "predictive-search__column--center") + '">', '<span class="predictive-search-item__title">', '<span class="predictive-search-item__title-text">' + e.title + "</span>", "</span>" + (w() ? d(e) : ""), '<span class="visually-hidden">, </span>', '<span class="visually-hidden">' + L(t + 1, i) + "</span>", "</div>", "</a>", "</li>"].join("")
        }

        function l(e) {
            return null === e.image ? "" : '<img class="predictive-search-item__image lazyload" src="' + e.image.url + '" data-src="' + e.image.url + '" data-image alt="' + e.image.alt + '" />'
        }

        function d(e) {
            return ['<dl class="predictive-search-item__details price' + (e.isOnSale ? " price--on-sale" : "") + (e.available ? "" : " price--sold-out") + (!e.isPriceVaries && e.isCompareVaries ? " price--compare-price-hidden" : "") + '">', '<div class="predictive-search-item__detail">', v(e), "</div>", '<div class="predictive-search-item__detail predictive-search-item__detail--inline">' + u(e), "</div>", "</dl>"].join("")
        }

        function u(e) {
            if (!theme.settings.predictiveSearchShowPrice) return "";
            var t = '<span class="visually-hidden">, </span>',
                i = '<div class="price__regular">' + m(e) + "</div>",
                s = '<div class="price__sale">' + h(e) + "</div>";
            return t + '<div class="price__pricing-group">' + (e.isOnSale ? s : i) + "</div>"
        }

        function h(e) {
            return ["<dt>", '<span class="visually-hidden">' + theme.strings.salePrice + "</span>", "</dt>", "<dd>", '<span class="predictive-search-item__price predictive-search-item__price--sale">' + (e.isPriceVaries ? theme.strings.fromLowestPrice.replace("[price]", e.price) : e.price) + "</span>", "</dd>", '<div class="price__compare">' + p(e) + "</div>"].join("")
        }

        function p(e) {
            return ["<dt>", '<span class="visually-hidden">' + theme.strings.regularPrice + "</span> ", "</dt>", "<dd>", '<span class="predictive-search-item__price predictive-search-item__price--compare">' + e.compareAtPrice + "</span>", "</dd>"].join("")
        }

        function m(e) {
            return ["<dt>", '<span class="visually-hidden">' + theme.strings.regularPrice + "</span>", "</dt>", "<dd>", '<span class="predictive-search-item__price">' + (e.isPriceVaries ? theme.strings.fromLowestPrice.replace("[price]", e.price) : e.price) + "</span>", "</dd>"].join("")
        }

        function v(e) {
            return theme.settings.predictiveSearchShowVendor && "" !== e.vendor ? ["<dt>", '<span class="visually-hidden">' + theme.strings.vendor + "</span>", "</dt>", '<dd class="predictive-search-item__vendor">' + e.vendor + "</dd>"].join("") : ""
        }

        function f(e) {
            return {
                url: e.url,
                title: e.title,
                featured_image: e.featured_image
            }
        }

        function y(e) {
            var t = e.variants.length > 0 ? e.variants[0] : e;
            return {
                url: t.url,
                image: g(e),
                title: e.title,
                vendor: e.vendor || "",
                price: theme.Currency.formatMoney(e.price_min, theme.moneyFormat),
                compareAtPrice: theme.Currency.formatMoney(e.compare_at_price_min, theme.moneyFormat),
                available: e.available,
                isOnSale: b(e),
                isPriceVaries: S(e),
                isCompareVaries: _(e)
            }
        }

        function g(e) {
            var t, i;
            return e.variants.length > 0 && null !== e.variants[0].image ? i = e.variants[0].featured_image : e.image ? i = e.featured_image : t = null, null !== t && (t = {
                url: theme.Images.getSizedImageUrl(i.url, "100x"),
                alt: i.alt
            }), t
        }

        function b(e) {
            return null !== e.compare_at_price_min && parseInt(e.compare_at_price_min, 10) > parseInt(e.price_min, 10)
        }

        function S(e) {
            return e.price_max !== e.price_min
        }

        function _(e) {
            return e.compare_at_price_max !== e.compare_at_price_min
        }

        function w() {
            var e = [theme.settings.predictiveSearchShowPrice, theme.settings.predictiveSearchShowVendor],
                t = e.reduce(function (e, t) {
                    return e + (t ? 1 : 0)
                }, 0);
            return t
        }

        function L(e, t) {
            return theme.strings.number_of_results.replace("[result_number]", e).replace("[results_count]", t)
        }
        return function (t) {
            var s = t.products || [],
                n = t.articles || [],
                r = t.isLoading,
                o = t.searchQuery || "";
            return r && 0 === s.length ? i() : e(s, n, r, o)
        }
    }(), window.theme = window.theme || {},
    function () {
        function e(e) {
            return 1 === e.products.length ? theme.strings.one_result_found : theme.strings.number_of_results_found.replace("[results_count]", e.products.length)
        }

        function t() {
            return theme.strings.loading
        }

        function i() {
            var e = JSON.parse(document.getElementById("shopify-features").textContent);
            return e.predictiveSearch
        }

        function s() {
            return window.theme.settings.predictiveSearchEnabled
        }

        function n() {
            return i() && s()
        }

        function r(e, t) {
            t.addEventListener("click", a.bind(this, e))
        }

        function o(e, t) {
            t.addEventListener("click", function (t) {
                e.value = "", e.focus()
            })
        }

        function a(e, t) {
            var i = 0 === e.value.trim().length;
            i && (void 0 !== t && t.preventDefault(), e.focus())
        }
        window.theme.SearchPage = function () {
            function i(i) {
                var s = document.querySelector(o.searchInput),
                    a = document.querySelector(o.searchSubmit),
                    c = s.dataset.baseUrl;
                n = new window.Shopify.theme.PredictiveSearchComponent({
                    selectors: {
                        input: o.searchInput,
                        reset: o.searchReset,
                        result: o.searchResults
                    },
                    searchUrl: c,
                    resultTemplateFct: window.theme.SearchResultsTemplate,
                    numberOfResultsTemplateFct: e,
                    loadingResultsMessageTemplateFct: t,
                    onOpen: function (e) {
                        if (!i.isTabletAndUp) {
                            var t = s.getBoundingClientRect(),
                                n = document.body.offsetHeight,
                                r = 50,
                                o = n - t.bottom - r;
                            e.result.style.maxHeight = o + "px"
                        }
                    },
                    onBeforeDestroy: function (e) {
                        e.result.style.maxHeight = ""
                    }
                }), r(s, a)
            }

            function s() {
                n && (n.destroy(), n = null)
            }
            var n, o = {
                searchReset: "[data-search-page-predictive-search-clear]",
                searchInput: "[data-search-page-predictive-search-input]",
                searchSubmit: "[data-search-page-predictive-search-submit]",
                searchResults: '[data-predictive-search-mount="default"]'
            };
            return {
                init: i,
                unload: s
            }
        }(), window.theme.SearchHeader = function () {
            function i(i) {
                var s = document.querySelector(c.searchInput),
                    n = document.querySelector(c.searchSubmit),
                    l = document.querySelector(c.searchClear),
                    d = s.dataset.baseUrl;
                a = new window.Shopify.theme.PredictiveSearchComponent({
                    selectors: {
                        input: c.searchInput,
                        result: c.searchResults
                    },
                    searchUrl: d,
                    resultTemplateFct: window.theme.SearchResultsTemplate,
                    numberOfResultsTemplateFct: e,
                    numberOfResults: i.numberOfResults,
                    loadingResultsMessageTemplateFct: t,
                    onInputBlur: function () {
                        return !1
                    },
                    onOpen: function (e) {
                        var t = s.getBoundingClientRect(),
                            n = window.innerHeight - t.bottom - (i.isTabletAndUp ? 20 : 0);
                        e.result.style.top = i.isTabletAndUp ? "" : t.bottom + "px", e.result.style.maxHeight = n + "px"
                    },
                    onClose: function (e) {
                        e.result.style.maxHeight = ""
                    },
                    onBeforeDestroy: function (e) {
                        e.result.style.top = ""
                    }
                }), r(s, n), o(s, l)
            }

            function s() {
                a && (a.destroy(), a = null)
            }

            function n() {
                a && a.clearAndClose()
            }
            var a, c = {
                searchInput: "[data-predictive-search-drawer-input]",
                searchResults: '[data-predictive-search-mount="drawer"]',
                searchFormContainer: "[data-search-form-container]",
                searchSubmit: "[data-search-form-submit]",
                searchClear: ".js-search-clear"
            };
            return {
                init: i,
                unload: s,
                clearAndClose: n
            }
        }(), window.theme.Search = function () {
            function e() {
                document.querySelector(o.siteHeader) && n() && (Object.keys(a).forEach(function (e) {
                    a[e].addListener(t)
                }), t())
            }

            function t() {
                theme.SearchDrawer.close(), theme.SearchHeader.unload(), theme.SearchPage.unload(), a.mobile.matches ? (theme.SearchHeader.init({
                    numberOfResults: 4,
                    isTabletAndUp: !1
                }), i() && theme.SearchPage.init({
                    isTabletAndUp: !1
                })) : (theme.SearchHeader.init({
                    numberOfResults: 4,
                    isTabletAndUp: !0
                }), i() && theme.SearchPage.init({
                    isTabletAndUp: !0
                }))
            }

            function i() {
                return document.body.classList.contains(r.searchTemplate)
            }

            function s() {
                theme.SearchHeader.unload(), theme.SearchPage.unload()
            }
            var r = {
                searchTemplate: "template-search"
            },
                o = {
                    siteHeader: ".header"
                },
                a = {
                    mobile: window.matchMedia("(max-width: 749px)"),
                    tabletAndUp: window.matchMedia("(min-width: 750px)")
                };
            return {
                init: e,
                unload: s
            }
        }()
    }(), window.theme = window.theme || {}, theme.SearchDrawer = function () {
        function e() {
            t(), o = new theme.Drawers("SearchDrawer", "top", {
                onDrawerOpen: function () {
                    i(), n()
                },
                onDrawerClose: function () {
                    theme.SearchHeader.clearAndClose();
                    var e = document.querySelector(a.drawerOpenButton);
                    e && e.focus(), r()
                },
                withPredictiveSearch: !0,
                elementToFocusOnOpen: document.querySelector(a.headerSearchInput)
            })
        }

        function t() {
            var e = document.querySelector(a.drawerOpenButton);
            e && (e.setAttribute("aria-controls", "SearchDrawer"), e.setAttribute("aria-expanded", "false"), e.setAttribute("aria-controls", "dialog"))
        }

        function i() {
            var e = document.querySelector(a.drawer),
                t = document.querySelector(a.headerSection).offsetHeight;
            e.style.height = t + "px"
        }

        function s() {
            o.close()
        }

        function n() {
            theme.Helpers.enableScrollLock()
        }

        function r() {
            theme.Helpers.disableScrollLock()
        }
        var o, a = {
            headerSection: ".header",
            drawer: "[data-predictive-search-drawer]",
            drawerOpenButton: "[data-predictive-search-open-drawer]",
            headerSearchInput: "[data-predictive-search-drawer-input]",
            predictiveSearchWrapper: '[data-predictive-search-mount="drawer"]'
        };
        return {
            init: e,
            close: s
        }
    }(), theme.Disclosure = function () {
        function e(e) {
            this.container = e, this._cacheSelectors(), this._setupListeners()
        }
        var t = {
            disclosureForm: "[data-disclosure-form]",
            disclosureList: "[data-disclosure-list]",
            disclosureToggle: "[data-disclosure-toggle]",
            disclosureInput: "[data-disclosure-input]",
            disclosureOptions: "[data-disclosure-option]"
        },
            i = {
                listVisible: "disclosure-list--visible"
            };
        return e.prototype = Object.assign({}, e.prototype, {
            _cacheSelectors: function () {
                this.cache = {
                    disclosureForm: this.container.closest(t.disclosureForm),
                    disclosureList: this.container.querySelector(t.disclosureList),
                    disclosureToggle: this.container.querySelector(t.disclosureToggle),
                    disclosureInput: this.container.querySelector(t.disclosureInput),
                    disclosureOptions: this.container.querySelectorAll(t.disclosureOptions)
                }
            },
            _setupListeners: function () {
                this.eventHandlers = this._setupEventHandlers(), this.cache.disclosureToggle.addEventListener("click", this.eventHandlers.toggleList), this.cache.disclosureOptions.forEach(function (e) {
                    e.addEventListener("click", this.eventHandlers.connectOptions)
                }, this), this.container.addEventListener("keyup", this.eventHandlers.onDisclosureKeyUp), this.cache.disclosureList.addEventListener("focusout", this.eventHandlers.onDisclosureListFocusOut), this.cache.disclosureToggle.addEventListener("focusout", this.eventHandlers.onDisclosureToggleFocusOut), document.body.addEventListener("click", this.eventHandlers.onBodyClick)
            },
            _setupEventHandlers: function () {
                return {
                    connectOptions: this._connectOptions.bind(this),
                    toggleList: this._toggleList.bind(this),
                    onBodyClick: this._onBodyClick.bind(this),
                    onDisclosureKeyUp: this._onDisclosureKeyUp.bind(this),
                    onDisclosureListFocusOut: this._onDisclosureListFocusOut.bind(this),
                    onDisclosureToggleFocusOut: this._onDisclosureToggleFocusOut.bind(this)
                }
            },
            _connectOptions: function (e) {
                e.preventDefault(), this._submitForm(e.currentTarget.dataset.value)
            },
            _onDisclosureToggleFocusOut: function (e) {
                var t = !1 === this.container.contains(e.relatedTarget);
                t && this._hideList()
            },
            _onDisclosureListFocusOut: function (e) {
                var t = e.currentTarget.contains(e.relatedTarget),
                    s = this.cache.disclosureList.classList.contains(i.listVisible);
                s && !t && this._hideList()
            },
            _onDisclosureKeyUp: function (e) {
                e.which === slate.utils.keyboardKeys.ESCAPE && (this._hideList(), this.cache.disclosureToggle.focus())
            },
            _onBodyClick: function (e) {
                var t = this.container.contains(e.target),
                    s = this.cache.disclosureList.classList.contains(i.listVisible);
                s && !t && this._hideList()
            },
            _submitForm: function (e) {
                this.cache.disclosureInput.value = e, this.cache.disclosureForm.submit()
            },
            _hideList: function () {
                this.cache.disclosureList.classList.remove(i.listVisible), this.cache.disclosureToggle.setAttribute("aria-expanded", !1)
            },
            _toggleList: function () {
                var e = "true" === this.cache.disclosureToggle.getAttribute("aria-expanded");
                this.cache.disclosureList.classList.toggle(i.listVisible), this.cache.disclosureToggle.setAttribute("aria-expanded", !e)
            },
            destroy: function () {
                this.cache.disclosureToggle.removeEventListener("click", this.eventHandlers.toggleList), this.cache.disclosureOptions.forEach(function (e) {
                    e.removeEventListener("click", this.eventHandlers.connectOptions)
                }, this), this.container.removeEventListener("keyup", this.eventHandlers.onDisclosureKeyUp), this.cache.disclosureList.removeEventListener("focusout", this.eventHandlers.onDisclosureListFocusOut), this.cache.disclosureToggle.removeEventListener("focusout", this.eventHandlers.onDisclosureToggleFocusOut), document.body.removeEventListener("click", this.eventHandlers.onBodyClick)
            }
        }), e
    }(), theme.Zoom = function () {
        function e(e) {
            this.container = e, this.cache = {}, this.url = e.dataset.zoom, this._cacheSelectors(), this.cache.sourceImage && this._duplicateImage()
        }
        var t = {
            imageZoom: "[data-image-zoom]"
        },
            i = {
                zoomImg: "zoomImg"
            },
            s = {
                imageZoomTarget: "data-image-zoom-target"
            };
        return e.prototype = Object.assign({}, e.prototype, {
            _cacheSelectors: function () {
                this.cache = {
                    sourceImage: this.container.querySelector(t.imageZoom)
                }
            },
            _init: function () {
                var e = this.cache.targetImage.width,
                    t = this.cache.targetImage.height;
                this.cache.sourceImage === this.cache.targetImage ? (this.sourceWidth = e, this.sourceHeight = t) : (this.sourceWidth = this.cache.sourceImage.width, this.sourceHeight = this.cache.sourceImage.height), this.xRatio = (this.cache.sourceImage.width - e) / this.sourceWidth, this.yRatio = (this.cache.sourceImage.height - t) / this.sourceHeight
            },
            _start: function (e) {
                this._init(), this._move(e)
            },
            _stop: function () {
                this.cache.targetImage.style.opacity = 0
            },
            _setTopLeftMaxValues: function (e, t) {
                return {
                    left: Math.max(Math.min(t, this.sourceWidth), 0),
                    top: Math.max(Math.min(e, this.sourceHeight), 0)
                }
            },
            _move: function (e) {
                var t = e.pageX - (this.cache.sourceImage.getBoundingClientRect().left + window.scrollX),
                    i = e.pageY - (this.cache.sourceImage.getBoundingClientRect().top + window.scrollY),
                    s = this._setTopLeftMaxValues(i, t);
                i = s.top, t = s.left, this.cache.targetImage.style.left = -t * -this.xRatio + "px", this.cache.targetImage.style.top = -i * -this.yRatio + "px", this.cache.targetImage.style.opacity = 1
            },
            _duplicateImage: function () {
                this._loadImage().then(function (e) {
                    this.cache.targetImage = e, e.style.width = e.width + "px", e.style.height = e.height + "px", e.style.position = "absolute", e.style.maxWidth = "none", e.style.maxHeight = "none", e.style.opacity = 0, e.style.border = "none", e.style.left = 0, e.style.top = 0, this.container.appendChild(e), this._init(), this._start = this._start.bind(this), this._stop = this._stop.bind(this), this._move = this._move.bind(this), this.container.addEventListener("mouseenter", this._start), this.container.addEventListener("mouseleave", this._stop), this.container.addEventListener("mousemove", this._move), this.container.style.position = "relative", this.container.style.overflow = "hidden"
                }.bind(this)).catch(function (e) {
                    console.warn("Error fetching image", e)
                })
            },
            _loadImage: function () {
                return new Promise(function (e, t) {
                    var n = new Image;
                    n.setAttribute("role", "presentation"), n.setAttribute(s.imageZoomTarget, !0), n.classList.add(i.zoomImg), n.src = this.url, n.addEventListener("load", function () {
                        e(n)
                    }), n.addEventListener("error", function (e) {
                        t(e)
                    })
                }.bind(this))
            },
            unload: function () {
                var e = this.container.querySelector("[" + s.imageZoomTarget + "]");
                e && e.remove(), this.container.removeEventListener("mouseenter", this._start), this.container.removeEventListener("mouseleave", this._stop), this.container.removeEventListener("mousemove", this._move)
            }
        }), e
    }(),
    function () {
        var e = document.querySelectorAll("[data-blog-tag-filter]");
        e.length && (slate.utils.resizeSelects(e), e.forEach(function (e) {
            e.addEventListener("change", function (e) {
                location.href = e.target.value
            })
        }))
    }(), window.theme = theme || {}, theme.customerTemplates = function () {
        function e() {
            this.recoverHeading = document.querySelector(o.RecoverHeading), this.recoverEmail = document.querySelector(o.RecoverEmail), this.loginHeading = document.querySelector(o.LoginHeading);
            var e = document.getElementById("RecoverPassword"),
                s = document.getElementById("HideRecoverPasswordLink");
            e && e.addEventListener("click", function (e) {
                e.preventDefault(), t(), this.recoverHeading.setAttribute("tabindex", "-1"), this.recoverHeading.focus()
            }.bind(this)), s && s.addEventListener("click", function (e) {
                e.preventDefault(), i(), this.loginHeading.setAttribute("tabindex", "-1"), this.loginHeading.focus()
            }.bind(this)), this.recoverHeading && this.recoverHeading.addEventListener("blur", function (e) {
                e.target.removeAttribute("tabindex")
            }), this.loginHeading && this.loginHeading.addEventListener("blur", function (e) {
                e.target.removeAttribute("tabindex")
            })
        }

        function t() {
            document.getElementById("RecoverPasswordForm").classList.remove("hide"), document.getElementById("CustomerLoginForm").classList.add("hide"), "true" === this.recoverEmail.getAttribute("aria-invalid") && this.recoverEmail.focus()
        }

        function i() {
            document.getElementById("RecoverPasswordForm").classList.add("hide"), document.getElementById("CustomerLoginForm").classList.remove("hide")
        }

        function s() {
            var e = document.querySelector(".reset-password-success");
            if (e) {
                var t = document.getElementById("ResetSuccess");
                t.classList.remove("hide"), t.focus()
            }
        }

        function n() {
            var e = document.getElementById("AddressNewForm"),
                t = document.getElementById("AddressNewButton");
            e && (Shopify && new Shopify.CountryProvinceSelector("AddressCountryNew", "AddressProvinceNew", {
                hideElement: "AddressProvinceContainerNew"
            }), document.querySelectorAll(".address-country-option").forEach(function (e) {
                var t = e.dataset.formId,
                    i = "AddressCountry_" + t,
                    s = "AddressProvince_" + t,
                    n = "AddressProvinceContainer_" + t;
                new Shopify.CountryProvinceSelector(i, s, {
                    hideElement: n
                })
            }), document.querySelectorAll(".address-new-toggle").forEach(function (i) {
                i.addEventListener("click", function () {
                    var i = "true" === t.getAttribute("aria-expanded");
                    document.querySelector("body").classList.toggle("prevent-scrolling"), e.classList.toggle("is-visible"), t.setAttribute("aria-expanded", !i), t.focus()
                })
            }), document.querySelectorAll(".address-edit-toggle").forEach(function (e) {
                e.addEventListener("click", function (e) {
                    var t = e.currentTarget.dataset.formId,
                        i = document.getElementById("EditFormButton_" + t),
                        s = document.getElementById("EditAddress_" + t),
                        n = "true" === i.getAttribute("aria-expanded");
                    document.querySelector("body").classList.toggle("prevent-scrolling"), s.classList.toggle("is-visible"), i.setAttribute("aria-expanded", !n), i.focus()
                })
            }), document.querySelectorAll(".address-delete").forEach(function (e) {
                e.addEventListener("click", function (e) {
                    var t = e.target.dataset.target,
                        i = e.target.dataset.confirmMessage;
                    confirm(i || "Are you sure you wish to delete this address?") && Shopify.postLink(t, {
                        parameters: {
                            _method: "delete"
                        }
                    })
                })
            }))
        }

        function r() {
            var e = window.location.hash;
            "#recover" === e && t.bind(this)()
        }
        var o = {
            RecoverHeading: "#RecoverHeading",
            RecoverEmail: "#RecoverEmail",
            LoginHeading: "#LoginHeading"
        };
        return {
            init: function () {
                e(), r(), s(), n()
            }
        }
    }(), window.theme = window.theme || {}, window.theme = window.theme || {}, theme.Filters = function () {
        function e(e) {
            this.filterSelect = e.querySelector(i.filterSelection), this.sortSelect = e.querySelector(i.sortSelection), this.selects = document.querySelectorAll(i.selectInput), this.sortSelect && (this.defaultSort = this._getDefaultSortValue()), this.selects.length && this.selects.forEach(function (e) {
                e.classList.remove("hidden")
            }), this.initBreakpoints = this._initBreakpoints.bind(this), this.mql = window.matchMedia(t.mediaQueryMediumUp), this.mql.addListener(this.initBreakpoints), this.filterSelect && this.filterSelect.addEventListener("change", this._onFilterChange.bind(this)), this.sortSelect && this.sortSelect.addEventListener("change", this._onSortChange.bind(this)), theme.Helpers.promiseStylesheet().then(function () {
                this._initBreakpoints()
            }.bind(this)), this._initParams()
        }
        var t = {
            mediaQueryMediumUp: "(min-width: " + theme.breakpoints.medium + "px)"
        },
            i = {
                filterSelection: "#FilterTags",
                sortSelection: "#SortBy",
                selectInput: "[data-select-input]"
            };
        return e.prototype = Object.assign({}, e.prototype, {
            _initBreakpoints: function () {
                this.mql.matches && slate.utils.resizeSelects(this.selects)
            },
            _initParams: function () {
                if (this.queryParams = {}, location.search.length)
                    for (var e, t = location.search.substr(1).split("&"), i = 0; i < t.length; i++) e = t[i].split("="), e.length > 1 && (this.queryParams[decodeURIComponent(e[0])] = decodeURIComponent(e[1]))
            },
            _onSortChange: function () {
                this.queryParams.sort_by = this._getSortValue(), this.queryParams.page && delete this.queryParams.page, window.location.search = decodeURIComponent(new URLSearchParams(Object.entries(this.queryParams)).toString())
            },
            _onFilterChange: function () {
                document.location.href = this._getFilterValue()
            },
            _getFilterValue: function () {
                return this.filterSelect.value
            },
            _getSortValue: function () {
                return this.sortSelect.value || this.defaultSort
            },
            _getDefaultSortValue: function () {
                return this.sortSelect.dataset.defaultSortby
            },
            onUnload: function () {
                this.filterSelect && this.filterSelect.removeEventListener("change", this._onFilterChange), this.sortSelect && this.sortSelect.removeEventListener("change", this._onSortChange), this.mql.removeListener(this.initBreakpoints)
            }
        }), e
    }(), window.theme = window.theme || {}, theme.CartSection = function () {
        function e() {
            theme.Cart.init()
        }
        return e
    }(), theme.HeaderSection = function () {
        function e() {
            theme.SearchDrawer.init(), theme.Search.init()
        }
        return e.prototype = Object.assign({}, e.prototype, {
            onUnload: function () {
                theme.Search.unload()
            }
        }), e
    }(), theme.Maps = function () {
        function e(e) {
            this.map = e.querySelector(a.map), this.map && (this.key = this.map.dataset.apiKey, void 0 !== this.key && ("loaded" === n ? this.createMap() : (r.push(this), "loading" !== n && (n = "loading", void 0 === window.google && theme.Helpers.getScript("https://maps.googleapis.com/maps/apijs?key=" + this.key).then(function () {
                n = "loaded", t()
            })))))
        }

        function t() {
            r.forEach(function (e) {
                e.createMap()
            })
        }

        function i(e) {
            return new Promise(function (t, i) {
                var s = new google.maps.Geocoder,
                    n = e.dataset.addressSetting;
                s.geocode({
                    address: n
                }, function (e, s) {
                    s !== google.maps.GeocoderStatus.OK && i(s), t(e)
                })
            })
        }
        var s = {
            zoom: 14
        },
            n = null,
            r = [],
            o = {
                addressNoResults: theme.strings.addressNoResults,
                addressQueryLimit: theme.strings.addressQueryLimit,
                addressError: theme.strings.addressError,
                authError: theme.strings.authError
            },
            a = {
                section: '[data-section-type="map"]',
                map: "[data-map]",
                mapOverlay: "[data-map-overlay]"
            },
            c = {
                mapError: "map-section--load-error",
                errorMsg: "map-section__error errors text-center"
            };
        return window.gm_authFailure = function () {
            Shopify.designMode && (document.querySelector(a.section).classList.add(c.mapError), document.querySelector(a.map).remove(), document.querySelector(a.mapOverlay).insertAdjacentHTML("afterend", '<div class="' + c.errorMsg + '">' + theme.strings.authError + "</div>"))
        }, e.prototype = Object.assign({}, e.prototype, {
            createMap: function () {
                return i(this.map).then(function (e) {
                    var t = {
                        zoom: s.zoom,
                        center: e[0].geometry.location,
                        draggable: !1,
                        clickableIcons: !1,
                        scrollwheel: !1,
                        disableDoubleClickZoom: !0,
                        disableDefaultUI: !0
                    },
                        i = this.map = new google.maps.Map(this.map, t),
                        n = this.center = i.getCenter();
                    new google.maps.Marker({
                        map: i,
                        position: i.getCenter()
                    });
                    google.maps.event.addDomListener(window, "resize", theme.Helpers.debounce(function () {
                        google.maps.event.trigger(i, "resize"), i.setCenter(n), this.map.removeAttribute("style")
                    }.bind(this), 250))
                }.bind(this)).catch(function () {
                    var e;
                    switch (status) {
                        case "ZERO_RESULTS":
                            e = o.addressNoResults;
                            break;
                        case "OVER_QUERY_LIMIT":
                            e = o.addressQueryLimit;
                            break;
                        case "REQUEST_DENIED":
                            e = o.authError;
                            break;
                        default:
                            e = o.addressError
                    }
                    Shopify.designMode && (this.map.parentNode.classList.add(c.mapError), this.map.parentNode.innerHTML = '<div class="' + c.errorMsg + '">' + e + "</div>")
                }.bind(this))
            },
            onUnload: function () {
                this.map && google.maps.event.clearListeners(this.map, "resize")
            }
        }), e
    }(), theme.Product = function () {
        function e(e) {
            this.container = e;
            var t = e.getAttribute("data-section-id");
            this.zoomPictures = [], this.ajaxEnabled = "true" === e.getAttribute("data-ajax-enabled"), this.settings = {
                mediaQueryMediumUp: "screen and (min-width: 750px)",
                mediaQuerySmall: "screen and (max-width: 749px)",
                bpSmall: !1,
                enableHistoryState: "true" === e.getAttribute("data-enable-history-state"),
                namespace: ".slideshow-" + t,
                sectionId: t,
                sliderActive: !1,
                zoomEnabled: !1
            }, this.selectors = {
                addToCart: "[data-add-to-cart]",
                addToCartText: "[data-add-to-cart-text]",
                cartCount: "[data-cart-count]",
                cartCountBubble: "[data-cart-count-bubble]",
                cartPopup: "[data-cart-popup]",
                cartPopupCartQuantity: "[data-cart-popup-cart-quantity]",
                cartPopupClose: "[data-cart-popup-close]",
                cartPopupDismiss: "[data-cart-popup-dismiss]",
                cartPopupImage: "[data-cart-popup-image]",
                cartPopupImageWrapper: "[data-cart-popup-image-wrapper]",
                cartPopupImagePlaceholder: "[data-image-loading-animation]",
                cartPopupProductDetails: "[data-cart-popup-product-details]",
                cartPopupQuantity: "[data-cart-popup-quantity]",
                cartPopupQuantityLabel: "[data-cart-popup-quantity-label]",
                cartPopupTitle: "[data-cart-popup-title]",
                cartPopupWrapper: "[data-cart-popup-wrapper]",
                loader: "[data-loader]",
                loaderStatus: "[data-loader-status]",
                quantity: "[data-qty-input]",
                SKU: ".variant-sku",
                productStatus: "[data-product-status]",
                originalSelectorId: "#ProductSelect-" + t,
                productForm: "[data-product-form]",
                errorMessage: "[data-error-message]",
                errorMessageWrapper: "[data-error-message-wrapper]",
                imageZoomWrapper: "[data-image-zoom-wrapper]",
                productMediaWrapper: "[data-product-single-media-wrapper]",
                productThumbImages: ".product-single__thumbnail--" + t,
                productThumbs: ".product-single__thumbnails-" + t,
                productThumbListItem: ".product-single__thumbnails-item",
                productThumbsWrapper: ".thumbnails-wrapper",
                saleLabel: ".product-price__sale-label-" + t,
                singleOptionSelector: ".single-option-selector-" + t,
                shopifyPaymentButton: ".shopify-payment-button",
                productMediaTypeVideo: "[data-product-media-type-video]",
                productMediaTypeModel: "[data-product-media-type-model]",
                priceContainer: "[data-price]",
                regularPrice: "[data-regular-price]",
                salePrice: "[data-sale-price]",
                unitPrice: "[data-unit-price]",
                unitPriceBaseUnit: "[data-unit-price-base-unit]",
                productPolicies: "[data-product-policies]",
                storeAvailabilityContainer: "[data-store-availability-container]",
                productThumbnails: "[data-product-thumbnails]",
                productGallery: "[data-product-gallery]",
                qtyOperator: "[data-qty-operator]",
                qtyMinus: '[data-qty-operator="minus"]',
                qtyPlus: '[data-qty-operator="plus"]',
                qtyInput: "[data-qty-input]",
                limitMessage: "[data-limit-message]"
            }, this.config = {
                qtyOperator: "data-qty-operator"
            }, this.classes = {
                cartPopupWrapperHidden: "cart-popup-wrapper--hidden",
                hidden: "hide",
                visibilityHidden: "visibility-hidden",
                inputError: "input--error",
                jsZoomEnabled: "js-zoom-enabled",
                productOnSale: "price--on-sale",
                productUnitAvailable: "price--unit-available",
                productUnavailable: "price--unavailable",
                productSoldOut: "price--sold-out",
                cartImage: "cart-popup-item__image",
                productFormErrorMessageWrapperHidden: "product-form__error-message-wrapper--hidden",
                activeClass: "active-thumb",
                variantSoldOut: "product-form--variant-sold-out"
            }, this.eventHandlers = {}, this.quantityInput = e.querySelector(this.selectors.quantity), this.errorMessageWrapper = e.querySelector(this.selectors.errorMessageWrapper), this.productForm = e.querySelector(this.selectors.productForm), this.addToCart = e.querySelector(this.selectors.addToCart), this.addToCartText = this.addToCart.querySelector(this.selectors.addToCartText), this.shopifyPaymentButton = e.querySelector(this.selectors.shopifyPaymentButton), this.priceContainer = e.querySelector(this.selectors.priceContainer), this.productPolicies = e.querySelector(this.selectors.productPolicies), this.storeAvailabilityContainer = e.querySelector(this.selectors.storeAvailabilityContainer), this.storeAvailabilityContainer && this._initStoreAvailability(), this.loader = this.addToCart.querySelector(this.selectors.loader), this.loaderStatus = e.querySelector(this.selectors.loaderStatus), this.imageZoomWrapper = e.querySelectorAll(this.selectors.imageZoomWrapper);
            var i = document.getElementById("ProductJson-" + t);
            i && i.innerHTML.length && (this.productSingleObject = JSON.parse(i.innerHTML), this.productState = {
                available: !0,
                soldOut: !1,
                onSale: !1,
                showUnitPrice: !1
            }, this.settings.zoomEnabled = this.imageZoomWrapper.length > 0 && this.imageZoomWrapper[0].classList.contains(this.classes.jsZoomEnabled), this.cartRoutes = JSON.parse(document.querySelector("[data-cart-routes]").innerHTML), this.qtyOperators = e.querySelectorAll(this.selectors.qtyOperator), this.qtyMinus = e.querySelector(this.selectors.qtyMinus), this.qtyInput = e.querySelector(this.selectors.qtyInput), this.initMobileBreakpoint = this._initMobileBreakpoint.bind(this), this.initDesktopBreakpoint = this._initDesktopBreakpoint.bind(this), this.mqlSmall = window.matchMedia(this.settings.mediaQuerySmall), this.mqlSmall.addListener(this.initMobileBreakpoint), this.mqlMediumUp = window.matchMedia(this.settings.mediaQueryMediumUp), this.mqlMediumUp.addListener(this.initDesktopBreakpoint), this.productThumbnails = e.querySelector(this.selectors.productThumbnails), this.productGallery = e.querySelector(this.selectors.productGallery), this.initMobileBreakpoint(), this.initDesktopBreakpoint(), this._initGallery(), this._stringOverrides(), this._initVariants(), this._initMediaSwitch(), this._initAddToCart(), this._setActiveThumbnail(), this._initProductVideo(), this._initModelViewerLibraries(), this._initShopifyXrLaunch(), this._saveRecentlyViewedProduct(), this._initQtySelectors())
        }
        return e.prototype = Object.assign({}, e.prototype, {
            _initQtySelectors: function () {
                this.eventHandlers.updateQty = this._updateQty.bind(this), this.qtyOperators.forEach(function (e) {
                    e.addEventListener("click", this.eventHandlers.updateQty)
                }, this)
            },
            _updateQty: function (e) {

                const data = {
                    cartQuantity: this.qtyInput.dataset.cartQuantity ? parseInt(this.qtyInput.dataset.cartQuantity) : 0,
                    min: this.qtyInput.dataset.min ? parseInt(this.qtyInput.dataset.min) : 1,
                    max: this.qtyInput.dataset.max ? parseInt(this.qtyInput.dataset.max) : null,
                    step: this.qtyInput.step ? parseInt(this.qtyInput.step) : 1,
                };

                const qtyPlusEl = document.querySelector(this.selectors.qtyPlus);
                const qtyMinusEl = document.querySelector(this.selectors.qtyMinus);
                const addToCartBtnEl = document.querySelector(this.selectors.addToCart);

                var t = e.currentTarget.getAttribute(this.config.qtyOperator),
                    i = parseInt(this.qtyInput.value);
                switch (t) {
                    case "plus":
                        i += 1;
                        break;
                    case "minus":
                        i -= 1
                }
                this.qtyMinus.disabled = 1 == i, this.qtyInput.value = i

                // stops user adding more than limit to cart.
                if (this.qtyInput.value == data.max) {
                    qtyPlusEl.disabled = true;
                } else {
                    qtyPlusEl.disabled = false;
                    addToCartBtnEl.disabled = false;
                }

                // stops user adding less than limit to cart.
                if (this.qtyInput.value == data.min) {
                    qtyMinusEl.disabled = true;
                } else {
                    qtyMinusEl.disabled = false;
                }
            },
            _initGallery: function () {
                var e = JSON.parse(this.productThumbnails.getAttribute("data-product-thumbnails")),
                    t = JSON.parse(this.productGallery.getAttribute("data-product-gallery"));
                this.productThumbnailsCarousel = new Splide(this.productThumbnails, e).mount(), this.productGalleryCarousel = new Splide(this.productGallery, t), this.productGalleryCarousel.sync(this.productThumbnailsCarousel).mount()
            },
            _saveRecentlyViewedProduct: function () {
                var e = JSON.parse(localStorage.getItem("recentlyViewedProducts") || "[]"),
                    t = this.productSingleObject.id;
                e = e.filter(e => e !== t), e.push(t);
                try {
                    localStorage.setItem("recentlyViewedProducts", JSON.stringify(e.slice(0, 24)))
                } catch (e) { }
            },
            _stringOverrides: function () {
                theme.productStrings = theme.productStrings || {}, theme.strings = Object.assign({}, theme.strings, theme.productStrings)
            },
            _initStoreAvailability: function () {
                this.storeAvailability = new theme.StoreAvailability(this.storeAvailabilityContainer);
                var e = function (e) {
                    this.cartPopupWrapper && !this.cartPopupWrapper.classList.contains(this.classes.cartPopupWrapperHidden) && this._hideCartPopup(e)
                };
                this.storeAvailabilityContainer.addEventListener("storeAvailabilityModalOpened", e.bind(this))
            },
            _initMobileBreakpoint: function () {
                this.mqlSmall.matches ? (this.container.querySelectorAll(this.selectors.productThumbImages).length > 4 && this._initThumbnailSlider(), this.settings.zoomEnabled && this.imageZoomWrapper.forEach(function (e, t) {
                    this._destroyZoom(t)
                }.bind(this)), this.settings.bpSmall = !0) : (this.settings.sliderActive && this._destroyThumbnailSlider(), this.settings.bpSmall = !1)
            },
            _initDesktopBreakpoint: function () {
                this.mqlMediumUp.matches && this.settings.zoomEnabled && this.imageZoomWrapper.forEach(function (e, t) {
                    this._enableZoom(e, t)
                }.bind(this))
            },
            _initVariants: function () {
                var e = {
                    container: this.container,
                    enableHistoryState: "true" === this.container.getAttribute("data-enable-history-state"),
                    singleOptionSelector: this.selectors.singleOptionSelector,
                    originalSelectorId: this.selectors.originalSelectorId,
                    product: this.productSingleObject
                };
                this.variants = new slate.Variants(e), this.storeAvailability && this.variants.currentVariant.available && this.storeAvailability.updateContent(this.variants.currentVariant.id), this.eventHandlers.updateAvailability = this._updateAvailability.bind(this), this.eventHandlers.updateMedia = this._updateMedia.bind(this), this.eventHandlers.updatePrice = this._updatePrice.bind(this), this.eventHandlers.updateSKU = this._updateSKU.bind(this), this.container.addEventListener("variantChange", this.eventHandlers.updateAvailability), this.container.addEventListener("variantImageChange", this.eventHandlers.updateMedia), this.container.addEventListener("variantPriceChange", this.eventHandlers.updatePrice), this.container.addEventListener("variantSKUChange", this.eventHandlers.updateSKU)
            },
            _initMediaSwitch: function () {
                if (document.querySelector(this.selectors.productThumbImages)) {
                    var e = this,
                        t = document.querySelectorAll(this.selectors.productThumbImages);
                    this.eventHandlers.handleMediaFocus = this._handleMediaFocus.bind(this), t.forEach(function (t) {
                        t.addEventListener("click", function (i) {
                            i.preventDefault();
                            var s = t.getAttribute("data-thumbnail-id");
                            e._switchMedia(s), e._setActiveThumbnail(s)
                        }), t.addEventListener("keyup", e.eventHandlers.handleMediaFocus)
                    })
                }
            },
            _initAddToCart: function () {
                this.productForm.addEventListener("submit", function (e) {
                    if ("true" !== this.addToCart.getAttribute("aria-disabled")) {
                        if (this.ajaxEnabled) {
                            e.preventDefault(), this.previouslyFocusedElement = document.activeElement;
                            var t = !!this.quantityInput && this.quantityInput.value <= 0;
                            if (!t) return !t && this.ajaxEnabled ? (this._handleButtonLoadingState(!0), void this._addItemToCart(this.productForm)) : void 0;
                            this._showErrorMessage(theme.strings.quantityMinimumMessage)
                        }
                    } else e.preventDefault()
                }.bind(this))
            },
            _initProductVideo: function () {
                var e = this.settings.sectionId,
                    t = this.container.querySelectorAll(this.selectors.productMediaTypeVideo);
                t.forEach(function (t) {
                    theme.ProductVideo.init(t, e)
                })
            },
            _initModelViewerLibraries: function () {
                var e = this.container.querySelectorAll(this.selectors.productMediaTypeModel);
                e.length < 1 || theme.ProductModel.init(e, this.settings.sectionId)
            },
            _initShopifyXrLaunch: function () {
                this.eventHandlers.initShopifyXrLaunchHandler = this._initShopifyXrLaunchHandler.bind(this), document.addEventListener("shopify_xr_launch", this.eventHandlers.initShopifyXrLaunchHandler)
            },
            _initShopifyXrLaunchHandler: function () {
                var e = this.container.querySelector(this.selectors.productMediaWrapper + ":not(." + self.classes.hidden + ")");
                e.dispatchEvent(new CustomEvent("xrLaunch", {
                    bubbles: !0,
                    cancelable: !0
                }))
            },
            _addItemToCart: function (e) {
                var t = this;
                fetch(this.cartRoutes.cartAddUrl + ".js", {
                    method: "POST",
                    credentials: "same-origin",
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded",
                        "X-Requested-With": "XMLHttpRequest"
                    },
                    body: theme.Helpers.serialize(e)
                }).then(function (e) {
                    return e.json()
                }).then(function (e) {
                    if (e.status && 200 !== e.status) {
                        var i = new Error(e.description);
                        throw i.isFromServer = !0, i
                    }
                    t._hideErrorMessage(), t._setupCartPopup(e), t._updateCartMinAndMaxValues(e)
                }).catch(function (e) {
                    t.previouslyFocusedElement.focus(), t._showErrorMessage(e.isFromServer && e.message.length ? e.message : theme.strings.cartError), t._handleButtonLoadingState(!1), console.log(e)
                })
            },
            _updateCartMinAndMaxValues: async function (e) {
                var cartContents = await fetch(window.Shopify.routes.root + 'cart.js')
                    .then(response => response.json())
                    .then(data => {
                        let variantInCart = data.items.find((element) => this.variants.currentVariant.id);
                        let newMaxAdd = parseInt(this.qtyInput.dataset.cartMax) - variantInCart.quantity;

                        this.qtyInput.dataset.max = newMaxAdd;
                        this.qtyInput.dataset.min = 1;
                        this.qtyInput.value = 1;
                        document.querySelector(this.selectors.qtyMinus).disabled = true;

                        if (newMaxAdd == 0) {
                            document.querySelector(this.selectors.qtyPlus).disabled = true;
                            document.querySelector(this.selectors.addToCart).disabled = true;
                            document.querySelector(this.selectors.limitMessage).classList.remove('hide');
                        } else if (newMaxAdd == 1) {
                            document.querySelector(this.selectors.qtyPlus).disabled = true;
                        }
                    });
            },
            _handleButtonLoadingState: function (e) {
                e ? (this.addToCart.setAttribute("aria-disabled", !0), this.addToCartText.classList.add(this.classes.hidden), this.loader.classList.remove(this.classes.hidden), this.shopifyPaymentButton && this.shopifyPaymentButton.setAttribute("disabled", !0), this.loaderStatus.setAttribute("aria-hidden", !1)) : (this.addToCart.removeAttribute("aria-disabled"), this.addToCartText.classList.remove(this.classes.hidden), this.loader.classList.add(this.classes.hidden), this.shopifyPaymentButton && this.shopifyPaymentButton.removeAttribute("disabled"), this.loaderStatus.setAttribute("aria-hidden", !0))
            },
            _showErrorMessage: function (e) {
                var t = this.container.querySelector(this.selectors.errorMessage);
                t.innerHTML = e, this.quantityInput && this.quantityInput.classList.add(this.classes.inputError), this.errorMessageWrapper.classList.remove(this.classes.productFormErrorMessageWrapperHidden), this.errorMessageWrapper.setAttribute("aria-hidden", !0), this.errorMessageWrapper.removeAttribute("aria-hidden")
            },
            _hideErrorMessage: function () {
                this.errorMessageWrapper.classList.add(this.classes.productFormErrorMessageWrapperHidden), this.quantityInput && this.quantityInput.classList.remove(this.classes.inputError)
            },
            _setupCartPopup: function (e) {
                this.cartPopup = this.cartPopup || document.querySelector(this.selectors.cartPopup), this.cartPopupWrapper = this.cartPopupWrapper || document.querySelector(this.selectors.cartPopupWrapper), this.cartPopupTitle = this.cartPopupTitle || document.querySelector(this.selectors.cartPopupTitle),
                    this.cartPopupQuantity = this.cartPopupQuantity || document.querySelector(this.selectors.cartPopupQuantity), this.cartPopupQuantityLabel = this.cartPopupQuantityLabel || document.querySelector(this.selectors.cartPopupQuantityLabel), this.cartPopupClose = this.cartPopupClose || document.querySelector(this.selectors.cartPopupClose), this.cartPopupDismiss = this.cartPopupDismiss || document.querySelector(this.selectors.cartPopupDismiss), this.cartPopupImagePlaceholder = this.cartPopupImagePlaceholder || document.querySelector(this.selectors.cartPopupImagePlaceholder), this._setupCartPopupEventListeners(), this._updateCartPopupContent(e)
            },
            _updateCartPopupContent: function (e) {
                var t = this,
                    i = this.quantityInput ? this.quantityInput.value : 1,
                    s = e.selling_plan_allocation ? e.selling_plan_allocation.selling_plan.name : null;
                this.cartPopupTitle.textContent = e.product_title, this.cartPopupQuantity.textContent = i, this.cartPopupQuantityLabel.textContent = theme.strings.quantityLabel.replace("[count]", i), this._setCartPopupPlaceholder(e.featured_image.url), this._setCartPopupImage(e.featured_image.url, e.featured_image.alt), this._setCartPopupProductDetails(e.product_has_only_default_variant, e.options_with_values, e.properties, s), fetch(this.cartRoutes.cartUrl + ".js", {
                    credentials: "same-origin"
                }).then(function (e) {
                    return e.json()
                }).then(function (e) {
                    t._setCartQuantity(e.item_count), t._setCartCountBubble(e.item_count), t._showCartPopup()
                }).catch(function (e) {
                    console.log(e)
                })
            },
            _setupCartPopupEventListeners: function () {
                this.eventHandlers.cartPopupWrapperKeyupHandler = this._cartPopupWrapperKeyupHandler.bind(this), this.eventHandlers.hideCartPopup = this._hideCartPopup.bind(this), this.eventHandlers.onBodyClick = this._onBodyClick.bind(this), this.cartPopupWrapper.addEventListener("keyup", this.eventHandlers.cartPopupWrapperKeyupHandler), this.cartPopupClose.addEventListener("click", this.eventHandlers.hideCartPopup), this.cartPopupDismiss.addEventListener("click", this.eventHandlers.hideCartPopup), document.body.addEventListener("click", this.eventHandlers.onBodyClick)
            },
            _cartPopupWrapperKeyupHandler: function (e) {
                e.keyCode === slate.utils.keyboardKeys.ESCAPE && this._hideCartPopup(e)
            },
            _setCartPopupPlaceholder: function (e) {
                this.cartPopupImageWrapper = this.cartPopupImageWrapper || document.querySelector(this.selectors.cartPopupImageWrapper), null !== e || this.cartPopupImageWrapper.classList.add(this.classes.hidden)
            },
            _setCartPopupImage: function (e, t) {
                if (null !== e) {
                    this.cartPopupImageWrapper.classList.remove(this.classes.hidden);
                    var i = theme.Images.getSizedImageUrl(e, "200x"),
                        s = document.createElement("img");
                    s.src = i, s.alt = t, s.classList.add(this.classes.cartImage), s.setAttribute("data-cart-popup-image", ""), s.onload = function () {
                        this.cartPopupImagePlaceholder.removeAttribute("data-image-loading-animation"), this.cartPopupImageWrapper.append(s)
                    }.bind(this)
                }
            },
            _setCartPopupProductDetails: function (e, t, i, s) {
                this.cartPopupProductDetails = this.cartPopupProductDetails || document.querySelector(this.selectors.cartPopupProductDetails);
                var n = "";
                e || (n += this._getVariantOptionList(t)), s && (n += this._getSellingPlanHTML(s)), null !== i && 0 !== Object.keys(i).length && (n += this._getPropertyList(i)), 0 === n.length ? (this.cartPopupProductDetails.innerHTML = "", this.cartPopupProductDetails.setAttribute("hidden", "")) : (this.cartPopupProductDetails.innerHTML = n, this.cartPopupProductDetails.removeAttribute("hidden"))
            },
            _getVariantOptionList: function (e) {
                var t = "";
                return e.forEach(function (e) {
                    t = t + '<li class="product-details__item product-details__item--variant-option">' + e.name + ": " + e.value + "</li>"
                }), t
            },
            _getPropertyList: function (e) {
                var t = "",
                    i = Object.entries(e);
                return i.forEach(function (e) {
                    "_" !== e[0].charAt(0) && 0 !== e[1].length && (t = t + '<li class="product-details__item product-details__item--property"><span class="product-details__property-label">' + e[0] + ": </span>" + e[1])
                }), t
            },
            _getSellingPlanHTML: function (e) {
                var t = '<li class="product-details__item product-details__item--property">' + e + "</li>";
                return t
            },
            _setCartQuantity: function (e) {
                var t;
                this.cartPopupCartQuantity = this.cartPopupCartQuantity || document.querySelector(this.selectors.cartPopupCartQuantity), 1 === e ? t = theme.strings.oneCartCount : e > 1 && (t = theme.strings.otherCartCount.replace("[count]", e)), this.cartPopupCartQuantity.textContent = e, this.cartPopupCartQuantity.setAttribute("aria-label", t)
            },
            _setCartCountBubble: function (e) {
                this.cartCountBubble = this.cartCountBubble || document.querySelector(this.selectors.cartCountBubble), this.cartCount = this.cartCount || document.querySelector(this.selectors.cartCount), this.cartCountBubble.classList.remove(this.classes.hidden), document.querySelector("[data-cart-delivery-product]") && (e -= 1), this.cartCount.textContent = e
            },
            _showCartPopup: function () {
                theme.Helpers.prepareTransition(this.cartPopupWrapper), this.cartPopupWrapper.classList.remove(this.classes.cartPopupWrapperHidden), this._handleButtonLoadingState(!1), slate.a11y.trapFocus({
                    container: this.cartPopupWrapper,
                    elementToFocus: this.cartPopup,
                    namespace: "cartPopupFocus"
                })
            },
            _hideCartPopup: function (e) {
                var t = 0 === e.detail;
                theme.Helpers.prepareTransition(this.cartPopupWrapper), this.cartPopupWrapper.classList.add(this.classes.cartPopupWrapperHidden);
                var i = document.querySelector(this.selectors.cartPopupImage);
                i && i.remove(), this.cartPopupImagePlaceholder.setAttribute("data-image-loading-animation", ""), slate.a11y.removeTrapFocus({
                    container: this.cartPopupWrapper,
                    namespace: "cartPopupFocus"
                }), t && this.previouslyFocusedElement.focus(), this.cartPopupWrapper.removeEventListener("keyup", this.eventHandlers.cartPopupWrapperKeyupHandler), this.cartPopupClose.removeEventListener("click", this.eventHandlers.hideCartPopup), this.cartPopupDismiss.removeEventListener("click", this.eventHandlers.hideCartPopup), document.body.removeEventListener("click", this.eventHandlers.onBodyClick)
            },
            _onBodyClick: function (e) {
                var t = e.target;
                t === this.cartPopupWrapper || t.closest(this.selectors.cartPopup) || this._hideCartPopup(e)
            },
            _setActiveThumbnail: function (e) {
                if (void 0 === e) {
                    var t = this.container.querySelector(this.selectors.productMediaWrapper + ":not(.hide)");
                    if (!t) return;
                    e = t.getAttribute("data-media-id")
                }
                var i, s = this.container.querySelectorAll(this.selectors.productThumbListItem + ":not(.slick-cloned)");
                s.forEach(function (t) {
                    var s = t.querySelector(this.selectors.productThumbImages + "[data-thumbnail-id='" + e + "']");
                    s && (i = s)
                }.bind(this));
                var n = document.querySelectorAll(this.selectors.productThumbImages);
                n.forEach(function (e) {
                    e.classList.remove(this.classes.activeClass), e.removeAttribute("aria-current")
                }.bind(this)), i && (i.classList.add(this.classes.activeClass), i.setAttribute("aria-current", !0), this._adjustThumbnailSlider(i))
            },
            _adjustThumbnailSlider: function (e) {
                var t = e.closest("[data-slider-item]");
                if (t) {
                    var i = 3 * Math.floor(Number(t.getAttribute("data-slider-slide-index")) / 3);
                    window.setTimeout(function () {
                        this.slideshow && this.slideshow.goToSlideByIndex(i)
                    }.bind(this), 251)
                }
            },
            _switchMedia: function (e) {
                var t = this.productGallery.querySelector('[data-product-gallery-id="' + e + '"]').getAttribute("data-product-gallery-index");
                this.productGalleryCarousel.go(t)
            },
            _handleMediaFocus: function (e) {
                if (e.keyCode === slate.utils.keyboardKeys.ENTER) {
                    var t = e.currentTarget.getAttribute("data-thumbnail-id"),
                        i = this.container.querySelector(this.selectors.productMediaWrapper + "[data-media-id='" + t + "']");
                    i.focus()
                }
            },
            _initThumbnailSlider: function () {
                setTimeout(function () {
                    this.slideshow = new theme.Slideshow(this.container.querySelector("[data-thumbnail-slider]"), {
                        canUseTouchEvents: !0,
                        type: "slide",
                        slideActiveClass: "slick-active",
                        slidesToShow: 3,
                        slidesToScroll: 3
                    }), this.settings.sliderActive = !0
                }.bind(this), 250)
            },
            _destroyThumbnailSlider: function () {
                var e = this.container.querySelectorAll("[data-slider-button]"),
                    t = this.container.querySelector("[data-slider-track]"),
                    i = t.querySelectorAll("[data-slider-item");
                this.settings.sliderActive = !1, t && (t.removeAttribute("style"), i.forEach(function (e) {
                    var t = e.querySelector("[data-slider-item-link]");
                    e.classList.remove("slick-active"), e.removeAttribute("style"), e.removeAttribute("tabindex"), e.removeAttribute("aria-hidden"), t.removeAttribute("tabindex")
                })), e.forEach(function (e) {
                    e.removeAttribute("aria-disabled")
                }), this.slideshow.destroy(), this.slideshow = null
            },
            _liveRegionText: function (e) {
                var t = "[Availability] [Regular] [$$] [Sale] [$]. [UnitPrice] [$$$]";
                if (!this.productState.available) return t = theme.strings.unavailable, t;
                var i = this.productState.soldOut ? theme.strings.soldOut + "," : "";
                t = t.replace("[Availability]", i);
                var s = "",
                    n = theme.Currency.formatMoney(e.price, theme.moneyFormat),
                    r = "",
                    o = "",
                    a = "",
                    c = "";
                return this.productState.onSale && (s = theme.strings.regularPrice, n = theme.Currency.formatMoney(e.compare_at_price, theme.moneyFormat) + ",", r = theme.strings.sale, o = theme.Currency.formatMoney(e.price, theme.moneyFormat)), this.productState.showUnitPrice && (a = theme.strings.unitPrice, c = theme.Currency.formatMoney(e.unit_price, theme.moneyFormat) + " " + theme.strings.unitPriceSeparator + " " + this._getBaseUnit(e)), t = t.replace("[Regular]", s).replace("[$$]", n).replace("[Sale]", r).replace("[$]", o).replace("[UnitPrice]", a).replace("[$$$]", c).trim(), t
            },
            _updateLiveRegion: function (e) {
                var t = e.detail.variant,
                    i = this.container.querySelector(this.selectors.productStatus);
                i.innerHTML = this._liveRegionText(t), i.setAttribute("aria-hidden", !1), setTimeout(function () {
                    i.setAttribute("aria-hidden", !0)
                }, 1e3)
            },
            _enableAddToCart: function (e) {
                this.addToCart.removeAttribute("aria-disabled"), this.addToCart.setAttribute("aria-label", e), this.addToCartText.innerHTML = e, this.productForm.classList.remove(this.classes.variantSoldOut)
            },
            _disableAddToCart: function (e) {
                e = e || theme.strings.unavailable, this.addToCart.setAttribute("aria-disabled", !0), this.addToCart.setAttribute("aria-label", e), this.addToCartText.innerHTML = e, this.productForm.classList.add(this.classes.variantSoldOut)
            },
            _updateAddToCart: function () {
                this.productState.available ? this.productState.soldOut ? this._disableAddToCart(theme.strings.soldOut) : this._enableAddToCart(theme.strings.addToCart) : this._disableAddToCart(theme.strings.unavailable)
            },
            _setProductState: function (e) {
                var t = e.detail.variant;
                t ? (this.productState.available = !0, this.productState.soldOut = !t.available, this.productState.onSale = t.compare_at_price > t.price, this.productState.showUnitPrice = !!t.unit_price) : this.productState.available = !1
            },
            _updateAvailability: function (e) {
                this._hideErrorMessage(), this._setProductState(e), this._updateStoreAvailabilityContent(e), this._updateAddToCart(), this._updateLiveRegion(e), this._updatePriceComponentStyles(e)
            },
            _updateStoreAvailabilityContent: function (e) {
                this.storeAvailability && (this.productState.available && !this.productState.soldOut ? this.storeAvailability.updateContent(e.detail.variant.id) : this.storeAvailability.clearContent())
            },
            _updateMedia: function (e) {
                var t = e.detail.variant,
                    i = t.featured_media.id;
                this._switchMedia(i)
            },
            _hidePriceComponent: function () {
                this.priceContainer.classList.add(this.classes.productUnavailable), this.priceContainer.setAttribute("aria-hidden", !0), this.productPolicies && this.productPolicies.classList.add(this.classes.visibilityHidden)
            },
            _updatePriceComponentStyles: function (e) {
                var t = e.detail.variant,
                    i = this.priceContainer.querySelector(this.selectors.unitPriceBaseUnit);
                this.productState.available ? (this.productState.soldOut ? this.priceContainer.classList.add(this.classes.productSoldOut) : this.priceContainer.classList.remove(this.classes.productSoldOut), this.productState.showUnitPrice ? (i.innerHTML = this._getBaseUnit(t), this.priceContainer.classList.add(this.classes.productUnitAvailable)) : this.priceContainer.classList.remove(this.classes.productUnitAvailable), this.productState.onSale ? this.priceContainer.classList.add(this.classes.productOnSale) : this.priceContainer.classList.remove(this.classes.productOnSale), this.priceContainer.classList.remove(this.classes.productUnavailable), this.priceContainer.removeAttribute("aria-hidden"), this.productPolicies && this.productPolicies.classList.remove(this.classes.visibilityHidden)) : this._hidePriceComponent()
            },
            _updatePrice: function (e) {
                var t = e.detail.variant,
                    i = this.priceContainer.querySelectorAll(this.selectors.regularPrice),
                    s = this.priceContainer.querySelector(this.selectors.salePrice),
                    n = this.priceContainer.querySelector(this.selectors.unitPrice),
                    r = function (e, t) {
                        e.innerHTML = theme.Currency.formatMoney(t, theme.moneyFormat)
                    };
                this.productState.onSale ? (i.forEach(function (e) {
                    r(e, t.compare_at_price)
                }), s.innerHTML = theme.Currency.formatMoney(t.price, theme.moneyFormat)) : i.forEach(function (e) {
                    r(e, t.price)
                }), this.productState.showUnitPrice && (n.innerHTML = theme.Currency.formatMoney(t.unit_price, theme.moneyFormat))
            },
            _getBaseUnit: function (e) {
                return 1 === e.unit_price_measurement.reference_value ? e.unit_price_measurement.reference_unit : e.unit_price_measurement.reference_value + e.unit_price_measurement.reference_unit
            },
            _updateSKU: function (e) {
                var t = e.detail.variant,
                    i = document.querySelector(this.selectors.SKU);
                i && (i.innerHTML = t.sku)
            },
            _enableZoom: function (e, t) {
                this.zoomPictures[t] = new theme.Zoom(e)
            },
            _destroyZoom: function (e) {
                0 !== this.zoomPictures.length && this.zoomPictures[e].unload()
            },
            onUnload: function () {
                this.container.removeEventListener("variantChange", this.eventHandlers.updateAvailability), this.container.removeEventListener("variantImageChange", this.eventHandlers.updateMedia), this.container.removeEventListener("variantPriceChange", this.eventHandlers.updatePrice), this.container.removeEventListener("variantSKUChange", this.eventHandlers.updateSKU), theme.ProductVideo.removeSectionVideos(this.settings.sectionId), theme.ProductModel.removeSectionModels(this.settings.sectionId), this.mqlSmall && this.mqlSmall.removeListener(this.initMobileBreakpoint), this.mqlMediumUp && this.mqlMediumUp.removeListener(this.initDesktopBreakpoint)
            }
        }), e
    }(), theme.ProductRecommendations = function () {
        function e(e) {
            var t = this,
                i = e.dataset.baseUrl,
                s = e.dataset.productId,
                n = i + "?section_id=product-recommendations&product_id=" + s + "&limit=8";
            window.performance.mark("debut:product:fetch_product_recommendations.start"), fetch(n).then(function (e) {
                return e.text()
            }).then(function (t) {
                "" !== t.trim() && (e.innerHTML = t, e.innerHTML = e.firstElementChild.innerHTML, window.performance.mark("debut:product:fetch_product_recommendations.end"), performance.measure("debut:product:fetch_product_recommendations", "debut:product:fetch_product_recommendations.start", "debut:product:fetch_product_recommendations.end"))
            }).then(function () {
                t.carousel = e.querySelector("[data-carousel]"), t.options = JSON.parse(t.carousel.getAttribute("data-carousel")), t.sliderActive = !1, t.initSlider = t.initSlider.bind(t), t.initSlider()
            })
        }
        return e.prototype = Object.assign({}, e.prototype, {
            initSlider: function () {
                this.sliderActive && (this.splide.destroy(), this.sliderActive = !1), this.splide = new Splide(this.carousel, this.options).mount(), this.sliderActive = !0
            },
            onUnload: function () {
                this.splide.destroy(), this.sliderActive = !1
            }
        }), e
    }(), theme.Quotes = function () {
        function e(e) {
            this.container = e;
            var s = e.getAttribute("data-section-id");
            this.slider = document.getElementById("Quotes-" + s), this.sliderActive = !1, this.mobileOptions = Object.assign({}, i, {
                canUseTouchEvents: !0,
                slidesToShow: 1
            }), this.desktopOptions = Object.assign({}, i, {
                slidesToShow: Math.min(i.slidesToShow, this.slider.getAttribute("data-count"))
            }), this.initMobileSlider = this._initMobileSlider.bind(this), this.initDesktopSlider = this._initDesktopSlider.bind(this), this.mqlSmall = window.matchMedia(t.mediaQuerySmall), this.mqlSmall.addListener(this.initMobileSlider), this.mqlMediumUp = window.matchMedia(t.mediaQueryMediumUp), this.mqlMediumUp.addListener(this.initDesktopSlider), this.initMobileSlider(), this.initDesktopSlider()
        }
        var t = {
            mediaQuerySmall: "screen and (max-width: 749px)",
            mediaQueryMediumUp: "screen and (min-width: 750px)",
            slideCount: 0
        },
            i = {
                canUseKeyboardArrows: !1,
                type: "slide",
                slidesToShow: 3
            };
        return e.prototype = Object.assign({}, e.prototype, {
            onUnload: function () {
                this.mqlSmall.removeListener(this.initMobileSlider), this.mqlMediumUp.removeListener(this.initDesktopSlider), this.slideshow.destroy()
            },
            onBlockSelect: function (e) {
                var t = document.querySelector(".quotes-slide--" + e.detail.blockId),
                    i = Number(t.getAttribute("data-slider-slide-index"));
                this.mqlMediumUp.matches && (i = Math.max(0, Math.min(i, this.slideshow.slides.length - 3))), this.slideshow.goToSlideByIndex(i)
            },
            _initMobileSlider: function () {
                this.mqlSmall.matches && this._initSlider(this.mobileOptions)
            },
            _initDesktopSlider: function () {
                this.mqlMediumUp.matches && this._initSlider(this.desktopOptions)
            },
            _initSlider: function (e) {
                this.sliderActive && (this.slideshow.destroy(), this.sliderActive = !1), this.slideshow = new theme.Slideshow(this.container, e), this.sliderActive = !0
            }
        }), e
    }(), theme.Carousel = function () {
        function e(e) {
            this.container = e, this.carousel = e.querySelector("[data-carousel]"), this.options = JSON.parse(this.carousel.getAttribute("data-carousel")), this.sliderActive = !1, this.initSlider = this.initSlider.bind(this), this.initSlider()
        }
        return e.prototype = Object.assign({}, e.prototype, {
            initSlider: function () {
                this.sliderActive && (this.splide.destroy(), this.sliderActive = !1), this.splide = new Splide(this.carousel, this.options).mount(), this.sliderActive = !0
            },
            onUnload: function () {
                this.splide.destroy(), this.sliderActive = !1
            }
        }), e
    }(), theme.RecentlyViewedProducts = function () {
        function e(e) {
            var t = this;
            t.container = e, t.recentlyViewedIds = JSON.parse(localStorage.getItem("recentlyViewedProducts") || "[]");
            const i = t.recentlyViewedIds.map(function (e) {
                return "id:" + e
            }).join(" OR ");
            fetch(theme.urls.root + "search?view=recently-viewed-products&type=product&q=" + i, {
                credentials: "same-origin",
                method: "GET"
            }).then(function (i) {
                i.text().then(function (e) {
                    var i = t.container.querySelector("#recentlyViewedProductsContent");
                    i.innerHTML = e
                }).then(function () {
                    t.carousel = e.querySelector("[data-carousel]"), t.options = JSON.parse(t.carousel.getAttribute("data-carousel")), t.sliderActive = !1, t.initSlider = t.initSlider.bind(t), t.initSlider()
                })
            })
        }
        return e.prototype = Object.assign({}, e.prototype, {
            initSlider: function () {
                this.sliderActive && (this.splide.destroy(), this.sliderActive = !1), this.splide = new Splide(this.carousel, this.options).mount(), this.sliderActive = !0
            },
            onUnload: function () {
                this.splide.destroy(), this.sliderActive = !1
            }
        }), e
    }(), theme.SlideshowSection = function () {
        function e(e) {
            var i = e.dataset.sectionId;
            this.container = e, this.eventHandlers = {}, this.slideshowDom = e.querySelector("#Slideshow-" + i), this.sliderMobileContentIndex = e.querySelectorAll(t.sliderMobileContentIndex), this.slideshow = new theme.Slideshow(e, {
                autoplay: "true" === this.slideshowDom.getAttribute("data-autorotate"),
                slideInterval: this.slideshowDom.getAttribute("data-speed")
            }), this._setupEventListeners()
        }
        var t = {
            sliderMobileContentIndex: "[data-slider-mobile-content-index]"
        };
        return e
    }(), theme.SlideshowSection.prototype = Object.assign({}, theme.SlideshowSection.prototype, {
        _setupEventListeners: function () {
            this.eventHandlers.onSliderSlideChanged = function (e) {
                this._onSliderSlideChanged(e.detail)
            }.bind(this), this.container.addEventListener("slider_slide_changed", this.eventHandlers.onSliderSlideChanged)
        },
        _onSliderSlideChanged: function (e) {
            var t = "slideshow__text-content--mobile-active";
            this.sliderMobileContentIndex.forEach(function (i) {
                Number(i.getAttribute("data-slider-mobile-content-index")) === e ? i.classList.add(t) : i.classList.remove(t)
            })
        },
        onUnload: function () {
            this.slideshow.destroy()
        },
        onBlockSelect: function (e) {
            this.slideshow.adaptHeight && this.slideshow.setSlideshowHeight();
            var t = this.container.querySelector(".slideshow__slide--" + e.detail.blockId),
                i = t.getAttribute("data-slider-slide-index");
            this.slideshow.setSlide(i), this.slideshow.stopAutoplay()
        },
        onBlockDeselect: function () {
            this.slideshow.startAutoplay()
        }
    }), window.theme = window.theme || {}, theme.StoreAvailability = function () {
        function e(e) {
            this.container = e, this.productTitle = this.container.dataset.productTitle, this.hasOnlyDefaultVariant = "true" === this.container.dataset.hasOnlyDefaultVariant
        }
        var t = {
            storeAvailabilityModalOpen: "[data-store-availability-modal-open]",
            storeAvailabilityModalProductTitle: "[data-store-availability-modal-product-title]",
            storeAvailabilityModalVariantTitle: "[data-store-availability-modal-variant-title]"
        },
            i = {
                hidden: "hide"
            };
        return e.prototype = Object.assign({}, e.prototype, {
            updateContent: function (e) {
                var i = this.container.dataset.baseUrl + "/variants/" + e + "/?section_id=store-availability",
                    s = this,
                    n = s.container.querySelector(t.storeAvailabilityModalOpen);
                this.container.style.opacity = .5, n && (n.disabled = !0, n.setAttribute("aria-busy", !0)), fetch(i).then(function (e) {
                    return e.text()
                }).then(function (e) {
                    "" !== e.trim() && (s.container.innerHTML = e, s.container.innerHTML = s.container.firstElementChild.innerHTML, s.container.style.opacity = 1, n = s.container.querySelector(t.storeAvailabilityModalOpen), n && (n.addEventListener("click", s._onClickModalOpen.bind(s)), s.modal = s._initModal(), s._updateProductTitle(), s.hasOnlyDefaultVariant && s._hideVariantTitle()))
                })
            },
            clearContent: function () {
                this.container.innerHTML = ""
            },
            _onClickModalOpen: function () {
                this.container.dispatchEvent(new CustomEvent("storeAvailabilityModalOpened", {
                    bubbles: !0,
                    cancelable: !0
                }))
            },
            _initModal: function () {
                return new window.Modals("StoreAvailabilityModal", "store-availability-modal", {
                    close: ".js-modal-close-store-availability-modal",
                    closeModalOnClick: !0,
                    openClass: "store-availabilities-modal--active"
                })
            },
            _updateProductTitle: function () {
                var e = this.container.querySelector(t.storeAvailabilityModalProductTitle);
                e.textContent = this.productTitle
            },
            _hideVariantTitle: function () {
                var e = this.container.querySelector(t.storeAvailabilityModalVariantTitle);
                e.classList.add(i.hidden)
            }
        }), e
    }(), theme.VideoSection = function () {
        function e(e) {
            e.querySelectorAll(".video").forEach(function (e) {
                theme.Video.init(e), theme.Video.editorLoadVideo(e.id)
            })
        }
        return e
    }(), theme.VideoSection.prototype = Object.assign({}, theme.VideoSection.prototype, {
        onUnload: function () {
            theme.Video.removeEvents()
        }
    }), theme.heros = {}, theme.HeroSection = function () {
        function e(e) {
            var t = e.getAttribute("data-section-id"),
                i = "#Hero-" + t;
            theme.heros[i] = new theme.Hero(i, t)
        }
        return e
    }(), window.theme = window.theme || {};
var selectors = {
    disclosureLocale: "[data-disclosure-locale]",
    disclosureCountry: "[data-disclosure-country]"
};
theme.FooterSection = function () {
    function e(e) {
        this.container = e, this.cache = {}, this.cacheSelectors(), this.cache.localeDisclosure && (this.localeDisclosure = new theme.Disclosure(this.cache.localeDisclosure)), this.cache.countryDisclosure && (this.countryDisclosure = new theme.Disclosure(this.cache.countryDisclosure))
    }
    return e.prototype = Object.assign({}, e.prototype, {
        cacheSelectors: function () {
            this.cache = {
                localeDisclosure: this.container.querySelector(selectors.disclosureLocale),
                countryDisclosure: this.container.querySelector(selectors.disclosureCountry)
            }
        },
        onUnload: function () {
            this.cache.localeDisclosure && this.localeDisclosure.destroy(), this.cache.countryDisclosure && this.countryDisclosure.destroy()
        }
    }), e
}(), document.addEventListener("DOMContentLoaded", function () {
    function e() {
        var e = document.querySelectorAll(".lazyloaded");
        e.forEach(function (e) {
            removeImageLoadingAnimation(e)
        })
    }
    var t = new theme.Sections;
    t.register("cart-template", theme.CartSection), t.register("product", theme.Product), t.register("collection-template", theme.Filters), t.register("product-template", theme.Product), t.register("header-section", theme.HeaderSection), t.register("map", theme.Maps), t.register("slideshow-section", theme.SlideshowSection), t.register("store-availability", theme.StoreAvailability), t.register("video-section", theme.VideoSection), t.register("quotes", theme.Quotes), t.register("hero-section", theme.HeroSection), t.register("product-recommendations", theme.ProductRecommendations), t.register("footer-section", theme.FooterSection), t.register("carousel", theme.Carousel), t.register("recently-viewed-products", theme.RecentlyViewedProducts), theme.customerTemplates.init();
    var i = ".rte table,.custom__item-inner--html table";
    slate.rte.wrapTable({
        tables: document.querySelectorAll(i),
        tableWrapperClass: "scrollable-wrapper"
    });
    var s = '.rte iframe[src*="youtube.com/embed"],.rte iframe[src*="player.vimeo"],.custom__item-inner--html iframe[src*="youtube.com/embed"],.custom__item-inner--html iframe[src*="player.vimeo"]';
    slate.rte.wrapIframe({
        iframes: document.querySelectorAll(s),
        iframeWrapperClass: "video-wrapper"
    }), slate.a11y.pageLinkFocus(document.getElementById(window.location.hash.substr(1)));
    var n = document.querySelector(".in-page-link");
    n && n.addEventListener("click", function (e) {
        slate.a11y.pageLinkFocus(document.getElementById(e.currentTarget.hash.substr(1)))
    }), document.querySelectorAll('a[href="#"]').forEach(function (e) {
        e.addEventListener("click", function (e) {
            e.preventDefault()
        })
    }), slate.a11y.accessibleLinks({
        messages: {
            newWindow: theme.strings.newWindow,
            external: theme.strings.external,
            newWindowExternal: theme.strings.newWindowExternal
        },
        links: document.querySelectorAll("a[href]:not([aria-describedby]), .product-single__thumbnail")
    }), theme.FormStatus.init();
    var r = {
        image: "[data-image]",
        lazyloaded: ".lazyloaded"
    };
    document.addEventListener("lazyloaded", function (e) {
        var t = e.target;
        if (removeImageLoadingAnimation(t), document.body.classList.contains("template-index")) {
            var i = document.getElementById("MainContent");
            if (i && i.children && i.children.length) {
                var s = document.getElementsByClassName("index-section")[0];
                if (!s.contains(t)) return;
                window.performance.mark("debut:index:first_image_visible")
            }
        }
        if (t.hasAttribute("data-bgset")) {
            var n = t.querySelector(r.lazyloaded);
            if (n) {
                var o = t.getAttribute("data-alt"),
                    a = n.hasAttribute("data-src") ? n.getAttribute("data-src") : t.getAttribute("data-bg");
                t.setAttribute("alt", o || ""), t.setAttribute("src", a || "")
            }
        }
        t.hasAttribute("data-image")
    }), e(), document.addEventListener("touchstart", function () {
        theme.Helpers.setTouch()
    }, {
        once: !0
    }), document.fonts && document.fonts.ready.then(function () {
        window.performance.mark("debut:fonts_loaded")
    })
});
var scroll = window.requestAnimationFrame || function (e) {
    window.setTimeout(e, 1e3 / 60)
},
    elementsToShow = document.querySelectorAll(".show-on-scroll, .fade-in, .image--slide-left, .image--slide-right");
loop(), document.addEventListener("DOMContentLoaded", function () {
    const e = document.querySelectorAll("[data-drawer]");
    Array.prototype.forEach.call(e, e => {
        e = new window.Drawer(e)
    });
    const t = document.querySelectorAll("[data-carousel]");
    Array.prototype.forEach.call(t, e => {
        let t = JSON.parse(e.getAttribute("data-carousel"));
        new Splide(e, t).mount()
    });
    const i = document.querySelectorAll("[data-accordion-header]");
    Array.prototype.forEach.call(i, e => {
        let t = e.nextElementSibling;
        e.onclick = (() => {
            let s = "true" === e.getAttribute("aria-expanded") || !1;
            Array.prototype.forEach.call(i, e => {
                e.setAttribute("aria-expanded", !1)
            }), e.setAttribute("aria-expanded", !s), t.hidden = s
        })
    });
    const s = document.querySelectorAll("[data-related-content-button]"),
        n = document.querySelectorAll("[data-related-content-panel]");
    Array.prototype.forEach.call(s, e => {
        let t = document.querySelector("#" + e.getAttribute("aria-controls"));
        e.onclick = (() => {
            n.forEach(e => {
                e.setAttribute("aria-expanded", !1)
            }), s.forEach(e => {
                e.classList.remove("is-active")
            }), e.classList.add("is-active"), t.setAttribute("aria-expanded", !0)
        })
    });
    const r = document.querySelectorAll("[data-qtyselector]");
    Array.prototype.forEach.call(r, e => {
        new theme.QtySelector(e)
    });
    const o = document.querySelectorAll("[data-countdown]");
    Array.prototype.forEach.call(o, e => {
        new theme.Countdown(e)
    });
    const a = document.querySelectorAll(".collection-inner .quick-add");
    Array.prototype.forEach.call(a, e => {
        new theme.QuickAdd(e)
    });
    const c = document.querySelector("[data-menu-mobile-contents]");
    c && c.addEventListener("change", function (e) {
        document.querySelector("#" + this.value).click()
    });
    const l = document.querySelectorAll("[data-calendar]");
    Array.prototype.forEach.call(l, e => {
        let t = JSON.parse(e.getAttribute("data-calendar"));
        flatpickr(e, t)
    });
    const d = document.querySelector("[data-view-transcript]");
    d && d.addEventListener("click", function (e) {
        const t = document.querySelector("#transcript");
        let i = "true" != t.getAttribute("data-aria-hidden");
        t.setAttribute("data-aria-hidden", i)
    });
    const u = document.querySelector(".restaurant-booking-overlay"),
        h = document.querySelector("[data-booking-widget]"),
        p = document.getElementsByTagName("a");
    Array.prototype.forEach.call(p, e => {
        e.href.includes("sevenrooms") && !e.href.includes("experiences") && e.addEventListener("click", function (t) {
            t.preventDefault(), h.src = e.href, u.classList.add("is-visible")
        })
    }), u.addEventListener("click", function (e) {
        u.classList.remove("is-visible"), h.src = ""
    })
}),
    function () {
        function e() {
            S = document.querySelectorAll('[role="tab"]'), document.querySelectorAll('[role="tabpanel"]')
        }

        function s() {
            var e = document.querySelector("#" + w.get("tab"));
            e && (d(e, !1), document.getElementById("tabs-container").scrollIntoView({
                behavior: "smooth"
            }))
        }

        function n(e) {
            S[e].addEventListener("click", r), S[e].addEventListener("keydown", o), S[e].addEventListener("keyup", a), S[e].index = e
        }

        function r(e) {
            var t = e.currentTarget;
            d(t, !1)
        }

        function o(e) {
            var t = e.keyCode;
            switch (t) {
                case E.end:
                    e.preventDefault(), d(S[S.length - 1]);
                    break;
                case E.home:
                    e.preventDefault(), d(S[0]);
                    break;
                case E.up:
                case E.down:
                    c(e)
            }
        }

        function a(e) {
            var t = e.keyCode;
            switch (t) {
                case E.left:
                case E.right:
                    c(e);
                    break;
                case E.delete:
                    v(e)
            }
        }

        function c(e) {
            var t = e.keyCode,
                i = "vertical" == _.getAttribute("aria-orientation"),
                s = !1;
            i ? t !== E.up && t !== E.down || (e.preventDefault(), s = !0) : t !== E.left && t !== E.right || (s = !0), s && l(e)
        }

        function l(e) {
            var t = e.keyCode;
            for (x = 0; x < S.length; x++) S[x].addEventListener("focus", g);
            if (A[t]) {
                var i = e.target;
                void 0 !== i.index && (S[i.index + A[t]] ? S[i.index + A[t]].focus() : t === E.left || t === E.up ? m() : t !== E.right && t != E.down || h())
            }
        }

        function d(e, t) {
            t = t || !0, u(e), e.removeAttribute("tabindex"), e.setAttribute("aria-selected", "true");
            var i = e.getAttribute("aria-controls");
            document.getElementById(i).removeAttribute("hidden"), document.getElementById("tabs-container") && document.getElementById("tabs-container").scrollIntoView({
                behavior: "smooth"
            });
            let s = document.getElementById(i).querySelector("[data-carousel]");
            if (s) {
                let e = JSON.parse(s.getAttribute("data-carousel"));
                s = new Splide(s, e).mount()
            }
            t && e.focus()
        }

        function u(e) {
            var i = e.closest(".menu__wrapper");
            if (!i) i = e.closest(".carousel");
            var s = i.querySelectorAll('[role="tab"]'),
                n = i.querySelectorAll('[role="tabpanel"]');
            for (t = 0; t < s.length; t++) s[t].setAttribute("tabindex", "-1"), s[t].setAttribute("aria-selected", "false"), s[t].removeEventListener("focus", g);
            for (p = 0; p < n.length; p++) n[p].setAttribute("hidden", "hidden")
        }

        function h() {
            S[0].focus()
        }

        function m() {
            S[S.length - 1].focus()
        }

        function v(t) {
            target = t.target, null !== target.getAttribute("data-deletable") && (f(t, target), e(), target.index - 1 < 0 ? d(S[0]) : d(S[target.index - 1]))
        }

        function f(e) {
            var t = e.target,
                i = document.getElementById(t.getAttribute("aria-controls"));
            t.parentElement.removeChild(t), i.parentElement.removeChild(i)
        }

        function y() {
            var e = _.hasAttribute("data-delay"),
                t = 0;
            if (e) {
                var i = _.getAttribute("data-delay");
                t = i || 300
            }
            return t
        }

        function g(e) {
            var t = e.target;
            setTimeout(b, L, t)
        }

        function b(e) {
            focused = document.activeElement, e === focused && d(e, !1)
        }
        var S, _ = document.querySelectorAll('[role="tablist"]')[0],
            w = new URLSearchParams(window.location.search);
        if (e(), S.length > 0) var L = y();
        var E = {
            end: 35,
            home: 36,
            left: 37,
            up: 38,
            right: 39,
            down: 40,
            delete: 46
        },
            A = {
                37: -1,
                38: -1,
                39: 1,
                40: 1
            };
        for (i = 0; i < S.length; ++i) n(i);
        s();
        var C = document.querySelectorAll(".nav-header__item.has-megamenu");
        C.forEach(function (e) {
            hoverintent(e, function () {
                e.classList.add("show-megamenu")
            }, function () {
                e.classList.remove("show-megamenu")
            }).options({
                sensitivity: 100
            })
        })
    }();
